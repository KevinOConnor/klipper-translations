# Niolay Danov <nikdan@abv.bg>, 2024.
msgid ""
msgstr ""
"Report-Msgid-Bugs-To: yifeiding@protonmail.com\n"
"PO-Revision-Date: 2024-10-31 21:01+0000\n"
"Last-Translator: Niolay Danov <nikdan@abv.bg>\n"
"Language-Team: Bulgarian <https://hosted.weblate.org/projects/klipper/canbus/bg/>\n"
"Language: bg\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=n != 1;\n"
"X-Generator: Weblate 5.8.2-dev\n"

msgid "This document describes Klipper's CAN bus support."
msgstr "Този документ описва поддръжката на CAN шината на Klipper."

msgid "Device Hardware"
msgstr "Хардуер на устройството"

msgid "Host Hardware"
msgstr "Хардуер на хоста"

msgid ""
"It is also necessary to configure the host operating system to use the "
"adapter. This is typically done by creating a new file named "
"`/etc/network/interfaces.d/can0` with the following contents:"
msgstr ""
"Необходимо е също така да се конфигурира хост операционната система за "
"използване на адаптера. Обикновено това се прави чрез създаване на нов файл с "
"име `/etc/network/interfaces.d/can0` със следното съдържание:"

msgid "Terminating Resistors"
msgstr "Терминиращи резистори"

msgid ""
"A CAN bus should have two 120 ohm resistors between the CANH and CANL wires. "
"Ideally, one resistor located at each the end of the bus."
msgstr ""
"Шината CAN трябва да има два 120-омови резистора между проводниците CANH и "
"CANL. В идеалния случай по един резистор трябва да бъде разположен във всеки "
"край на шината."

msgid ""
"To test that the resistors are correct, one can remove power to the printer "
"and use a multi-meter to check the resistance between the CANH and CANL wires "
"- it should report ~60 ohms on a correctly wired CAN bus."
msgstr ""
"За да проверите дали резисторите са правилни, можете да изключите захранването"
" на принтера и да използвате мултиметър, за да проверите съпротивлението между"
" проводниците CANH и CANL - при правилно свързана CAN шина той трябва да "
"отчете ~60 ома."

msgid "Finding the canbus_uuid for new micro-controllers"
msgstr "Намиране на canbus_uuid за нови микроконтролери"

msgid ""
"Each micro-controller on the CAN bus is assigned a unique id based on the "
"factory chip identifier encoded into each micro-controller. To find each "
"micro-controller device id, make sure the hardware is powered and wired "
"correctly, and then run:"
msgstr ""
"На всеки микроконтролер по шината CAN се присвоява уникален идентификатор въз "
"основа на фабричния идентификатор на чипа, кодиран във всеки микроконтролер. "
"За да откриете идентификатора на устройството на всеки микроконтролер, уверете"
" се, че хардуерът е захранен и свързан правилно, и след това го стартирайте:"

msgid ""
"If uninitialized CAN devices are detected the above command will report lines "
"like the following:"
msgstr ""
"Ако бъдат открити неинициализирани CAN устройства, горната команда ще отчете "
"следните редове:"

msgid ""
"Each device will have a unique identifier. In the above example, "
"`11aa22bb33cc` is the micro-controller's \"canbus_uuid\"."
msgstr ""
"Всяко устройство ще има уникален идентификатор. В горния пример `11aa22bb33cc`"
" е \"canbus_uuid\" на микроконтролера."

msgid ""
"Note that the `canbus_query.py` tool will only report uninitialized devices - "
"if Klipper (or a similar tool) configures the device then it will no longer "
"appear in the list."
msgstr ""
"Имайте предвид, че инструментът `canbus_query.py` ще докладва само за "
"неинициализирани устройства - ако Klipper (или подобен инструмент) конфигурира"
" устройството, то вече няма да се появява в списъка."

msgid "Configuring Klipper"
msgstr "Конфигуриране на Klipper"

msgid ""
"Update the Klipper [mcu configuration](Config_Reference.md#mcu) to use the CAN"
" bus to communicate with the device - for example:"
msgstr ""
"Актуализирайте Klipper [mcu configuration](Config_Reference.md#mcu), за да "
"използвате CAN шината за комуникация с устройството - например:"

#: docs/CANBUS.md:block 1 (header)
msgid "CANBUS"
msgstr "CANBUS"

#: docs/CANBUS.md:block 5 (paragraph)
msgid ""
"To compile for CAN, run `make menuconfig` and select \"CAN bus\" as the "
"communication interface. Finally, compile the micro-controller code and flash "
"it to the target board."
msgstr ""
"За да компилирате за CAN, стартирайте `make menuconfig` и изберете \"CAN bus\""
" като комуникационен интерфейс. Накрая компилирайте кода на микроконтролера и "
"го прехвърлете на целевата платка."

#: docs/CANBUS.md:block 26 (header)
msgid "USB to CAN bus bridge mode"
msgstr "Режим на мост между USB и CAN шина"

#: docs/CANBUS.md:block 29 (paragraph)
msgid "Some important notes when using this mode:"
msgstr "Някои важни забележки при използването на този режим:"

#: docs/CANBUS.md:block 30 (unordered list)
msgid ""
"It is necessary to configure the `can0` (or similar) interface in Linux in "
"order to communicate with the bus. However, Linux CAN bus speed and CAN bus "
"bit-timing options are ignored by Klipper. Currently, the CAN bus frequency is"
" specified during \"make menuconfig\" and the bus speed specified in Linux is "
"ignored."
msgstr ""
"Необходимо е да се конфигурира интерфейсът `can0` (или подобен) в Linux, за да"
" се осъществи връзка с шината. Въпреки това скоростта на CAN шината в Linux и "
"опциите за битово време на CAN шината се игнорират от Klipper. Понастоящем "
"честотата на CAN шината се задава по време на \"make menuconfig\" и скоростта "
"на шината, зададена в Linux, се игнорира."

#: docs/CANBUS.md:block 4 (paragraph)
msgid ""
"Klipper currently supports CAN on stm32, SAME5x, and rp2040 chips. In "
"addition, the micro-controller chip must be on a board that has a CAN "
"transceiver."
msgstr ""
"Понастоящем Klipper поддържа CAN на чипове stm32, SAME5x и rp2040. Освен това "
"микроконтролерният чип трябва да е на платка, която има CAN приемо-предавател."

#: docs/CANBUS.md:block 7 (paragraph)
msgid ""
"In order to use a CAN bus, it is necessary to have a host adapter. It is "
"recommended to use a \"USB to CAN adapter\". There are many different USB to "
"CAN adapters available from different manufacturers. When choosing one, we "
"recommend verifying that the firmware can be updated on it. (Unfortunately, "
"we've found some USB adapters run defective firmware and are locked down, so "
"verify before purchasing.) Look for adapters that can run Klipper directly (in"
" its \"USB to CAN bridge mode\") or that run the [candlelight "
"firmware](https://github.com/candle-usb/candleLight_fw)."
msgstr ""
"За да използвате CAN шина, е необходимо да разполагате с хост адаптер. "
"Препоръчва се използването на \"USB към CAN адаптер\". Има много различни "
"адаптери от USB към CAN, предлагани от различни производители. Когато избирате"
" такъв, препоръчваме да проверите дали фърмуерът може да бъде актуализиран в "
"него. (За съжаление, установихме, че някои USB адаптери работят с дефектен "
"фърмуер и са блокирани, затова проверете преди покупка.) Търсете адаптери, "
"които могат да стартират Klipper директно (в режим \"USB към CAN мост\") или "
"които работят с фърмуера [candlelight firmware](https://github.com/candle-"
"usb/candleLight_fw)."

#: docs/CANBUS.md:block 12 (paragraph)
msgid ""
"Note that some devices have a builtin 120 ohm resistor that can not be easily "
"removed. Some devices do not include a resistor at all. Other devices have a "
"mechanism to select the resistor (typically by connecting a \"pin jumper\"). "
"Be sure to check the schematics of all devices on the CAN bus to verify that "
"there are two and only two 120 Ohm resistors on the bus."
msgstr ""
"Имайте предвид, че някои устройства имат вграден 120-омов резистор, който не "
"може да се отстрани лесно. Някои устройства изобщо не включват резистор. Други"
" устройства имат механизъм за избор на резистор (обикновено чрез свързване на "
"\"джъмпер\"). Не забравяйте да проверите схемите на всички устройства по "
"шината CAN, за да се уверите, че в шината има два и само два 120-омови "
"резистора."

#: docs/CANBUS.md:block 25 (paragraph)
msgid ""
"Some micro-controllers support selecting \"USB to CAN bus bridge\" mode during"
" Klipper's \"make menuconfig\". This mode may allow one to use a micro-"
"controller as both a \"USB to CAN bus adapter\" and as a Klipper node."
msgstr ""
"Някои микроконтролери поддържат избор на режим \"USB to CAN bus bridge\" (мост"
" между USB и CAN шина) по време на \"make menuconfig\" на Klipper. Този режим "
"може да позволи използването на микроконтролера едновременно като \"адаптер от"
" USB към CAN шина\" и като възел на Klipper."

#: docs/CANBUS.md:block 26 (paragraph)
msgid ""
"When Klipper uses this mode the micro-controller appears as a \"USB CAN bus "
"adapter\" under Linux. The \"Klipper bridge mcu\" itself will appear as if it "
"was on this CAN bus - it can be identified via `canbus_query.py` and it must "
"be configured like other CAN bus Klipper nodes."
msgstr ""
"Когато Klipper използва този режим, микроконтролерът се появява като \"USB CAN"
" bus adapter\" под Linux. Самият микропроцесор \"Klipper bridge mcu\" ще "
"изглежда така, сякаш е на тази CAN шина - той може да бъде идентифициран чрез "
"`canbus_query.py` и трябва да бъде конфигуриран като другите възли на Klipper "
"с CAN шина."

#: docs/CANBUS.md:block 28 (unordered list)
msgid ""
"Whenever the \"bridge mcu\" is reset, Linux will disable the corresponding "
"`can0` interface. To ensure proper handling of FIRMWARE_RESTART and RESTART "
"commands, it is recommended to use `allow-hotplug` in the "
"`/etc/network/interfaces.d/can0` file. For example:"
msgstr ""
"Всеки път, когато \"bridge mcu\" се нулира, Linux ще деактивира съответния "
"интерфейс `can0`. За да се осигури правилна обработка на командите "
"FIRMWARE_RESTART и RESTART, се препоръчва да се използва `allow-hotplug` във "
"файла `/etc/network/interfaces.d/can0`. Например:"

#: docs/CANBUS.md:block 30 (unordered list)
msgid ""
"The \"bridge mcu\" is not actually on the CAN bus. Messages to and from the "
"bridge mcu will not be seen by other adapters that may be on the CAN bus."
msgstr ""
"\"Мостовият микропроцесор\" всъщност не е включен в шината CAN. Съобщенията "
"към и от мостовия микропроцесор няма да се виждат от други адаптери, които "
"може да са на CAN шината."

#: docs/CANBUS.md:block 30 (unordered list)
msgid ""
"The available bandwidth to both the \"bridge mcu\" itself and all devices on "
"the CAN bus is effectively limited by the CAN bus frequency. As a result, it "
"is recommended to use a CAN bus frequency of 1000000 when using \"USB to CAN "
"bus bridge mode\"."
msgstr ""
"Наличната широчина на честотната лента както за самия мостов микропроцесор, "
"така и за всички устройства по шината CAN е ефективно ограничена от честотата "
"на шината CAN. В резултат на това се препоръчва да се използва честота на CAN "
"шината от 1000000, когато се използва \"режим на мост от USB към CAN шина\"."

#: docs/CANBUS.md:block 30 (unordered list)
msgid ""
"Even at a CAN bus frequency of 1000000, there may not be sufficient bandwidth "
"to run a `SHAPER_CALIBRATE` test if both the XY steppers and the accelerometer"
" all communicate via a single \"USB to CAN bus\" interface."
msgstr ""
"Дори при честота на шината CAN 1000000 може да няма достатъчна широчина на "
"честотната лента за провеждане на теста `SHAPER_CALIBRATE`, ако стъпковите "
"устройства XY и акселерометърът комуникират чрез един интерфейс \"USB към шина"
" CAN\"."

#: docs/CANBUS.md:block 30 (unordered list)
msgid ""
"A USB to CAN bridge board will not appear as a USB serial device, it will not "
"show up when running `ls /dev/serial/by-id`, and it can not be configured in "
"Klipper's printer.cfg file with a `serial:` parameter. The bridge board "
"appears as a \"USB CAN adapter\" and it is configured in the printer.cfg as a "
"[CAN node](#configuring-klipper)."
msgstr ""
"Платка с мост от USB към CAN няма да се появи като USB серийно устройство, "
"няма да се появи при изпълнение на `ls /dev/serial/by-id` и не може да бъде "
"конфигурирана във файла printer.cfg на Klipper с параметър `serial:`. "
"Мостовата платка се появява като \"USB CAN адаптер\" и се конфигурира в "
"printer.cfg като [CAN възел](#configuring-klipper)."

#: docs/CANBUS.md:block 31 (header)
msgid "Tips for troubleshooting"
msgstr "Съвети за отстраняване на неизправности"

#: docs/CANBUS.md:block 32 (paragraph)
msgid "See the [CAN bus troubleshooting](CANBUS_Troubleshooting.md) document."
msgstr ""
"Вижте документа [Отстраняване на неизправности по шината "
"CAN](CANBUS_Troubleshooting.md)."

#~ msgid "~/klippy-env/bin/python ~/klipper/scripts/canbus_query.py can0\n"
#~ msgstr "~/klippy-env/bin/python ~/klipper/scripts/canbus_query.py can0\n"

#~ msgid ""
#~ "[mcu my_can_mcu]\n"
#~ "canbus_uuid: 11aa22bb33cc\n"
#~ msgstr ""
#~ "[mcu my_can_mcu]\n"
#~ "canbus_uuid: 11aa22bb33cc\n"

#~ msgid "Found canbus_uuid=11aa22bb33cc, Application: Klipper\n"
#~ msgstr "Намерено canbus_uuid=11aa22bb33cc, Приложение: Klipper\n"

#~ msgid ""
#~ "allow-hotplug can0\n"
#~ "iface can0 can static\n"
#~ "    bitrate 1000000\n"
#~ "    up ip link set $IFACE txqueuelen 128\n"
#~ msgstr ""
#~ "allow-hotplug can0\n"
#~ "iface can0 can static\n"
#~ "    bitrate 1000000\n"
#~ "    up ip link set $IFACE txqueuelen 128\n"

#~ msgid ""
#~ "allow-hotplug can0\n"
#~ "iface can0 can static\n"
#~ "    bitrate 1000000\n"
#~ "    up ifconfig $IFACE txqueuelen 128\n"
#~ msgstr ""

#~ msgid ""
#~ "In order to use a CAN bus, it is necessary to have a host adapter. There are "
#~ "currently two common options:"
#~ msgstr ""

#~ msgid ""
#~ "Use a [Waveshare Raspberry Pi CAN hat](https://www.waveshare.com/rs485-can-"
#~ "hat.htm) or one of its many clones."
#~ msgstr ""

#~ msgid ""
#~ "Note that the \"Raspberry Pi CAN hat\" also requires [changes to "
#~ "config.txt](https://www.waveshare.com/wiki/RS485_CAN_HAT)."
#~ msgstr ""

#~ msgid ""
#~ "Note that some devices have a builtin 120 ohm resistor (for example, the "
#~ "\"Waveshare Raspberry Pi CAN hat\" has a soldered on resistor that can not be "
#~ "easily removed). Some devices do not include a resistor at all. Other devices "
#~ "have a mechanism to select the resistor (typically by connecting a \"pin "
#~ "jumper\"). Be sure to check the schematics of all devices on the CAN bus to "
#~ "verify that there are two and only two 120 Ohm resistors on the bus."
#~ msgstr ""

#~ msgid ""
#~ "auto can0\n"
#~ "iface can0 can static\n"
#~ "    bitrate 500000\n"
#~ "    up ifconfig $IFACE txqueuelen 128\n"
#~ msgstr ""

#~ msgid ""
#~ "Use a USB CAN adapter (for example <https://hacker-"
#~ "gadgets.com/product/cantact-usb-can-adapter/>). There are many different USB "
#~ "to CAN adapters available - when choosing one, we recommend verifying it can "
#~ "run the [candlelight firmware](https://github.com/candle-usb/candleLight_fw). "
#~ "(Unfortunately, we've found some USB adapters run defective firmware and are "
#~ "locked down, so verify before purchasing.)"
#~ msgstr ""

#~ msgid ""
#~ "Some micro-controllers support selecting \"USB to CAN bus bridge\" mode during"
#~ " \"make menuconfig\". This mode may allow one to use a micro-controller as "
#~ "both a \"USB to CAN bus adapter\" and as a Klipper node."
#~ msgstr ""

#~ msgid ""
#~ "When Klipper uses this mode the micro-controller appears as a \"USB CAN bus "
#~ "adapter\" under Linux. The \"Klipper bridge mcu\" itself will appear as if was"
#~ " on this CAN bus - it can be identified via `canbus_query.py` and configured "
#~ "like other CAN bus Klipper nodes. It will appear alongside other devices that "
#~ "are actually on the CAN bus."
#~ msgstr ""

#~ msgid ""
#~ "The \"bridge mcu\" is not actually on the CAN bus. Messages to and from it do "
#~ "not consume bandwidth on the CAN bus. The mcu can not be seen by other "
#~ "adapters that may be on the CAN bus."
#~ msgstr ""

#~ msgid ""
#~ "Whenever the \"bridge mcu\" is reset, Linux will disable the corresponding "
#~ "`can0` interface. To ensure proper handling of FIRMWARE_RESTART and RESTART "
#~ "commands, it is recommended to replace `auto` with `allow-hotplug` in the "
#~ "`/etc/network/interfaces.d/can0` file. For example:"
#~ msgstr ""

#~ msgid ""
#~ "allow-hotplug can0\n"
#~ "iface can0 can static\n"
#~ "    bitrate 500000\n"
#~ "    up ifconfig $IFACE txqueuelen 128\n"
#~ msgstr ""

#~ msgid ""
#~ "Klipper currently supports CAN on stm32, same5x, and rp2040 chips. In "
#~ "addition, the micro-controller chip must be on a board that has a CAN "
#~ "transceiver."
#~ msgstr ""

#~ msgid ""
#~ "Klipper currently supports CAN on stm32 and rp2040 chips. In addition, the "
#~ "micro-controller chip must be on a board that has a CAN transceiver."
#~ msgstr ""

#~ msgid ""
#~ "Klipper currently only supports CAN on stm32 chips. In addition, the micro-"
#~ "controller chip must support CAN and it must be on a board that has a CAN "
#~ "transceiver."
#~ msgstr ""

#~ msgid "Found canbus_uuid=11aa22bb33cc\n"
#~ msgstr ""

#~ msgid ""
#~ "Whenever the \"bridge mcu\" is reset, Linux will disable the corresponding "
#~ "`can0` interface. Generally, this may require running commands such as \"ip "
#~ "up\" to restart the interface. Thus, Klipper FIRMWARE_RESTART commands (or "
#~ "regular RESTART after a config change) may require restarting the `can0` "
#~ "interface."
#~ msgstr ""

#~ msgid ""
#~ "To compile for CAN, run \"make menuconfig\" and select \"CAN bus\" as the "
#~ "communication interface. Finally, compile the micro-controller code and flash "
#~ "it to the target board."
#~ msgstr ""

#~ msgid ""
#~ "Use a USB CAN adapter (for example [https://hacker-"
#~ "gadgets.com/product/cantact-usb-can-adapter/](https://hacker-"
#~ "gadgets.com/product/cantact-usb-can-adapter/)). There are many different USB "
#~ "to CAN adapters available - when choosing one, we recommend verifying it can "
#~ "run the [candlelight firmware](https://github.com/candle-usb/candleLight_fw). "
#~ "(Unfortunately, we've found some USB adapters run defective firmware and are "
#~ "locked down, so verify before purchasing.)"
#~ msgstr ""
