#
msgid ""
msgstr ""

msgid ""
"This document provides information on implementing G-Code command "
"sequences in gcode_macro (and similar) config sections."
msgstr ""

msgid "G-Code Macro Naming"
msgstr ""

msgid ""
"Case is not important for the G-Code macro name - MY_MACRO and "
"my_macro will evaluate the same and may be called in either upper or "
"lower case. If any numbers are used in the macro name then they must "
"all be at the end of the name (eg, TEST_MACRO25 is valid, but "
"MACRO25_TEST3 is not)."
msgstr ""

msgid "Formatting of G-Code in the config"
msgstr ""

msgid ""
"Indentation is important when defining a macro in the config file. To"
" specify a multi-line G-Code sequence it is important for each line "
"to have proper indentation. For example:"
msgstr ""

msgid ""
"Note how the `gcode:` config option always starts at the beginning of"
" the line and subsequent lines in the G-Code macro never start at the"
" beginning."
msgstr ""

msgid "Add a description to your macro"
msgstr ""

msgid ""
"To help identify the functionality a short description can be added. "
"Add `description:` with a short text to describe the functionality. "
"Default is \"G-Code macro\" if not specified. For example:"
msgstr ""

msgid ""
"This will be showing is you use the `HELP` command or use the "
"autocomplete function."
msgstr ""

msgid "Save/Restore state for G-Code moves"
msgstr ""

msgid ""
"Unfortunately, the G-Code command language can be challenging to use."
" The standard mechanism to move the toolhead is via the `G1` command "
"(the `G0` command is an alias for `G1` and it can be used "
"interchangeably with it). However, this command relies on the "
"\"G-Code parsing state\" setup by `M82`, `M83`, `G90`, `G91`, `G92`, "
"and previous `G1` commands. When creating a G-Code macro it is a good"
" idea to always explicitly set the G-Code parsing state prior to "
"issuing a `G1` command. (Otherwise, there is a risk the `G1` command "
"will make an undesirable request.)"
msgstr ""

msgid ""
"A common way to accomplish that is to wrap the `G1` moves in "
"`SAVE_GCODE_STATE`, `G91`, and `RESTORE_GCODE_STATE`. For example:"
msgstr ""

msgid ""
"The `G91` command places the G-Code parsing state into \"relative "
"move mode\" and the `RESTORE_GCODE_STATE` command restores the state "
"to what it was prior to entering the macro. Be sure to specify an "
"explicit speed (via the `F` parameter) on the first `G1` command."
msgstr ""

msgid "Template expansion"
msgstr ""

msgid ""
"The gcode_macro `gcode:` config section is evaluated using the Jinja2"
" template language. One can evaluate expressions at run-time by "
"wrapping them in `{ }` characters or use conditional statements "
"wrapped in `{% %}`. See the [Jinja2 "
"documentation](http://jinja.pocoo.org/docs/2.10/templates/) for "
"further information on the syntax."
msgstr ""

msgid "An example of a complex macro:"
msgstr ""

msgid "Macro parameters"
msgstr ""

msgid ""
"It is often useful to inspect parameters passed to the macro when it "
"is called. These parameters are available via the `params` pseudo-"
"variable. For example, if the macro:"
msgstr ""

msgid ""
"were invoked as `SET_PERCENT VALUE=.2` it would evaluate to `M117 Now"
" at 20%`. Note that parameter names are always in upper-case when "
"evaluated in the macro and are always passed as strings. If "
"performing math then they must be explicitly converted to integers or"
" floats."
msgstr ""

msgid ""
"It's common to use the Jinja2 `set` directive to use a default "
"parameter and assign the result to a local name. For example:"
msgstr ""

msgid "The \"printer\" Variable"
msgstr ""

msgid ""
"It is possible to inspect (and alter) the current state of the "
"printer via the `printer` pseudo-variable. For example:"
msgstr ""

msgid ""
"Available fields are defined in the [Status "
"Reference](Status_Reference.md) document."
msgstr ""

msgid ""
"Important! Macros are first evaluated in entirety and only then are "
"the resulting commands executed. If a macro issues a command that "
"alters the state of the printer, the results of that state change "
"will not be visible during the evaluation of the macro. This can also"
" result in subtle behavior when a macro generates commands that call "
"other macros, as the called macro is evaluated when it is invoked "
"(which is after the entire evaluation of the calling macro)."
msgstr ""

msgid ""
"By convention, the name immediately following `printer` is the name "
"of a config section. So, for example, `printer.fan` refers to the fan"
" object created by the `[fan]` config section. There are some "
"exceptions to this rule - notably the `gcode_move` and `toolhead` "
"objects. If the config section contains spaces in it, then one can "
"access it via the `[ ]` accessor - for example: "
"`printer[\"generic_heater my_chamber_heater\"].temperature`."
msgstr ""

msgid ""
"Note that the Jinja2 `set` directive can assign a local name to an "
"object in the `printer` hierarchy. This can make macros more readable"
" and reduce typing. For example:"
msgstr ""

msgid "Actions"
msgstr ""

msgid ""
"There are some commands available that can alter the state of the "
"printer. For example, `{ action_emergency_stop() }` would cause the "
"printer to go into a shutdown state. Note that these actions are "
"taken at the time that the macro is evaluated, which may be a "
"significant amount of time before the generated g-code commands are "
"executed."
msgstr ""

msgid "Available \"action\" commands:"
msgstr ""

msgid ""
"`action_respond_info(msg)`: Write the given `msg` to the /tmp/printer"
" pseudo-terminal. Each line of `msg` will be sent with a \"// \" "
"prefix."
msgstr ""

msgid ""
"`action_raise_error(msg)`: Abort the current macro (and any calling "
"macros) and write the given `msg` to the /tmp/printer pseudo-"
"terminal. The first line of `msg` will be sent with a \"!! \" prefix "
"and subsequent lines will have a \"// \" prefix."
msgstr ""

msgid ""
"`action_emergency_stop(msg)`: Transition the printer to a shutdown "
"state. The `msg` parameter is optional, it may be useful to describe "
"the reason for the shutdown."
msgstr ""

msgid ""
"`action_call_remote_method(method_name)`: Calls a method registered "
"by a remote client. If the method takes parameters they should be "
"provided via keyword arguments, ie: "
"`action_call_remote_method(\"print_stuff\", my_arg=\"hello_world\")`"
msgstr ""

msgid "Variables"
msgstr ""

msgid ""
"The SET_GCODE_VARIABLE command may be useful for saving state between"
" macro calls. Variable names may not contain any upper case "
"characters. For example:"
msgstr ""

msgid ""
"Be sure to take the timing of macro evaluation and command execution "
"into account when using SET_GCODE_VARIABLE."
msgstr ""

msgid "Delayed Gcodes"
msgstr ""

msgid ""
"The [delayed_gcode] configuration option can be used to execute a "
"delayed gcode sequence:"
msgstr ""

msgid ""
"When the `load_filament` macro above executes, it will display a "
"\"Load Complete!\" message after the extrusion is finished. The last "
"line of gcode enables the \"clear_display\" delayed_gcode, set to "
"execute in 10 seconds."
msgstr ""

msgid ""
"The `initial_duration` config option can be set to execute the "
"delayed_gcode on printer startup. The countdown begins when the "
"printer enters the \"ready\" state. For example, the below "
"delayed_gcode will execute 5 seconds after the printer is ready, "
"initializing the display with a \"Welcome!\" message:"
msgstr ""

msgid ""
"Its possible for a delayed gcode to repeat by updating itself in the "
"gcode option:"
msgstr ""

msgid ""
"The above delayed_gcode will send \"// Extruder Temp: [ex0_temp]\" to"
" Octoprint every 2 seconds. This can be canceled with the following "
"gcode:"
msgstr ""

msgid "Menu templates"
msgstr ""

msgid ""
"If a [display config section](Config_Reference.md#display) is "
"enabled, then it is possible to customize the menu with "
"[menu](Config_Reference.md#menu) config sections."
msgstr ""

msgid ""
"The following read-only attributes are available in menu templates:"
msgstr ""

msgid "`menu.width` - element width (number of display columns)"
msgstr ""

msgid "`menu.ns` - element namespace"
msgstr ""

msgid "`menu.event` - name of the event that triggered the script"
msgstr ""

msgid ""
"`menu.input` - input value, only available in input script context"
msgstr ""

msgid "The following actions are available in menu templates:"
msgstr ""

msgid ""
"`menu.back(force, update)`: will execute menu back command, optional "
"boolean parameters `<force>` and `<update>`."
msgstr ""

msgid ""
"When `<force>` is set True then it will also stop editing. Default "
"value is False."
msgstr ""

msgid ""
"When `<update>` is set False then parent container items are not "
"updated. Default value is True."
msgstr ""

msgid ""
"`menu.exit(force)` - will execute menu exit command, optional boolean"
" parameter `<force>` default value False."
msgstr ""

msgid "Save Variables to disk"
msgstr ""

msgid ""
"If a [save_variables config "
"section](Config_Reference.md#save_variables) has been enabled, "
"`SAVE_VARIABLE VARIABLE=<name> VALUE=<value>` can be used to save the"
" variable to disk so that it can be used across restarts. All stored "
"variables are loaded into the `printer.save_variables.variables` dict"
" at startup and can be used in gcode macros. to avoid overly long "
"lines you can add the following at the top of the macro:"
msgstr ""

msgid ""
"As an example, it could be used to save the state of 2-in-1-out "
"hotend and when starting a print ensure that the active extruder is "
"used, instead of T0:"
msgstr ""
