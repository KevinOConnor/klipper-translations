# Neko.vecter <Vecterfang@icloud.com>, 2021.
# Yifei Ding <dingyifeiair@gmail.com>, 2021, 2022.
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: yifeiding@protonmail.com\n"
"POT-Creation-Date: 2021-07-10 16:29+0200\n"
"PO-Revision-Date: 2022-02-14 07:25+0000\n"
"Last-Translator: Yifei Ding <dingyifeiair@gmail.com>\n"
"Language-Team: Chinese (Simplified) <https://hosted.weblate.org/projects/"
"klipper/canbus/zh_Hans/>\n"
"Language: zh-hans\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Weblate 4.11-dev\n"

msgid "This document describes Klipper's CAN bus support."
msgstr "本文档描述了 Klipper 的 CAN 总线支持。"

msgid "Device Hardware"
msgstr "设备硬件"

msgid ""
"Klipper currently only supports CAN on stm32 chips. In addition, the micro-"
"controller chip must support CAN and it must be on a board that has a CAN "
"transceiver."
msgstr "Klipper目前只支持 stm32 芯片的CAN。此外，微控制器芯片必须支持 CAN，而且你使用的主板必须有 CAN 收发器。"

msgid "Host Hardware"
msgstr "主机硬件"

msgid ""
"In order to use a CAN bus, it is necessary to have a host adapter. There are"
" currently two common options:"
msgstr "为了使用 CAN 总线，主机需要一个适配器。目前有两种常见的选择："

msgid ""
"Use a [Waveshare Raspberry Pi CAN hat](https://www.waveshare.com/rs485-can-"
"hat.htm) or one of its many clones."
msgstr ""
"使用[Waveshare Raspberry Pi CAN hat](https://www.waveshare.com/rs485-can-"
"hat.htm)或其众多克隆中的一个。"

msgid ""
"It is also necessary to configure the host operating system to use the "
"adapter. This is typically done by creating a new file named "
"`/etc/network/interfaces.d/can0` with the following contents:"
msgstr ""
"还需要将主机操作系统配置为使用适配器。通常可以通过创建一个名为 `/etc/network/interfaces.d/can0` "
"的新文件来实现，该文件包含以下内容："

msgid ""
"Note that the \"Raspberry Pi CAN hat\" also requires [changes to "
"config.txt](https://www.waveshare.com/wiki/RS485_CAN_HAT)."
msgstr ""
"注意，\"Raspberry Pi CAN hat\" 需要额外[对 config.txt "
"进行修改](https://www.waveshare.com/wiki/RS485_CAN_HAT)。"

msgid "Terminating Resistors"
msgstr "终端电阻"

msgid ""
"A CAN bus should have two 120 ohm resistors between the CANH and CANL wires."
" Ideally, one resistor located at each the end of the bus."
msgstr "CAN总线在 CANH 和 CANL 导线之间必须两个 120 欧姆的电阻。理想情况下，总线的两端各有一个电阻。"

msgid ""
"Note that some devices have a builtin 120 ohm resistor (for example, the "
"\"Waveshare Raspberry Pi CAN hat\" has a soldered on resistor that can not "
"be easily removed). Some devices do not include a resistor at all. Other "
"devices have a mechanism to select the resistor (typically by connecting a "
"\"pin jumper\"). Be sure to check the schematics of all devices on the CAN "
"bus to verify that there are two and only two 120 Ohm resistors on the bus."
msgstr ""
"请注意，有些设备有一个内置的120欧姆电阻（例如，\"Waveshare Raspberry Pi CAN "
"hat\"有一个难以拆除的贴片电阻）。有些设备根本不带有一个电阻。其他设备有一个选择电阻的机制（通常是一个跳线）。一定要检查 CAN "
"总线上所有设备的原理图，以确认总线上有两个而且只有两个120欧姆的电阻。"

msgid ""
"To test that the resistors are correct, one can remove power to the printer "
"and use a multi-meter to check the resistance between the CANH and CANL "
"wires - it should report ~60 ohms on a correctly wired CAN bus."
msgstr ""
"要测试电阻是否正确，先切断打印机的电源，并用多用表检查 CANH 和 CANL 线之间的阻值—在正确接线的 CAN 总线上，它应该报告大约60 欧姆。"

msgid "Finding the canbus_uuid for new micro-controllers"
msgstr "寻找新微控制器的 canbus_uuid"

msgid ""
"Each micro-controller on the CAN bus is assigned a unique id based on the "
"factory chip identifier encoded into each micro-controller. To find each "
"micro-controller device id, make sure the hardware is powered and wired "
"correctly, and then run:"
msgstr ""
"CAN 总线上的每个微控制器都根据编码到每个微控制器中的工厂芯片标识符分配了一个唯一的 ID。要查找每个微控制器设备 "
"ID，请确保硬件已正确供电和接线，然后运行："

msgid ""
"If uninitialized CAN devices are detected the above command will report "
"lines like the following:"
msgstr "如果检测到未初始化的 CAN 设备，上述命令将报告如下行："

msgid ""
"Each device will have a unique identifier. In the above example, "
"`11aa22bb33cc` is the micro-controller's \"canbus_uuid\"."
msgstr "每个设备将有一个独特的标识符。在上面的例子中，`11aa22bb33cc`是微控制器'的\"canbus_uuid\" 。"

msgid ""
"Note that the `canbus_query.py` tool will only report uninitialized devices "
"- if Klipper (or a similar tool) configures the device then it will no "
"longer appear in the list."
msgstr ""
"注意，`canbus_query.py` 工具只会只报告未初始化的设备—如果Klipper（或类似工具）已经配置了设备，那么它不会在列表中。"

msgid "Configuring Klipper"
msgstr "配置 Klipper"

msgid ""
"Update the Klipper [mcu configuration](Config_Reference.md#mcu) to use the "
"CAN bus to communicate with the device - for example:"
msgstr "更新Klipper的 [mcu 配置](Config_Reference.md#mcu)，以使用 CAN 总线与设备通信—例如："

msgid ""
"auto can0\n"
"iface can0 can static\n"
"    bitrate 500000\n"
"    up ifconfig $IFACE txqueuelen 128\n"
msgstr ""
"auto can0\n"
"iface can0 can static\n"
"    bitrate 500000\n"
"    up ifconfig $IFACE txqueuelen 128\n"

msgid "~/klippy-env/bin/python ~/klipper/scripts/canbus_query.py can0\n"
msgstr "~/klippy-env/bin/python ~/klipper/scripts/canbus_query.py can0\n"

msgid "Found canbus_uuid=11aa22bb33cc\n"
msgstr "Found canbus_uuid=11aa22bb33cc\n"

msgid ""
"[mcu my_can_mcu]\n"
"canbus_uuid: 11aa22bb33cc\n"
msgstr ""
"[mcu my_can_mcu]\n"
"canbus_uuid: 11aa22bb33cc\n"

#: docs/CANBUS.md:block 1 (header)
msgid "CANBUS"
msgstr "CAN 总线"

#: docs/CANBUS.md:block 8 (ordered list)
msgid ""
"Use a USB CAN adapter (for example <https://hacker-"
"gadgets.com/product/cantact-usb-can-adapter/>). There are many different USB"
" to CAN adapters available - when choosing one, we recommend verifying it "
"can run the [candlelight firmware](https://github.com/candle-"
"usb/candleLight_fw). (Unfortunately, we've found some USB adapters run "
"defective firmware and are locked down, so verify before purchasing.)"
msgstr ""
"使用一个USB CAN适配器（例如<https://hacker-gadgets.com/product/cantact-usb-can-"
"adapter/>）。有许多不同的USB到CAN适配器—当选择时，我们建议验证它是否能运行[candlelight "
"固件](https://github.com/candle-"
"usb/candleLight_fw)。(不幸的是，我们发现一些USB适配器运行有缺陷的固件，并被锁死，所以在购买前要进行核实。）"

#: docs/CANBUS.md:block 5 (paragraph)
msgid ""
"To compile for CAN, run `make menuconfig` and select \"CAN bus\" as the "
"communication interface. Finally, compile the micro-controller code and "
"flash it to the target board."
msgstr ""
"要针对 CAN 进行编译，请运行 ` make menuconfig`并选择\"CAN Bus\"作为通信接口"
"。最后，编译微控制器代码并将其刷写到目标控制版上。"

#~ msgid ""
#~ "To compile for CAN, run \"make menuconfig\" and select \"CAN bus\" as the "
#~ "communication interface. Finally, compile the micro-controller code and "
#~ "flash it to the target board."
#~ msgstr ""
#~ "要为 CAN 编译固件，请运行“make menuconfig”并选择“CAN bus”作为通信接口。最后，编译微控制器代码并将其刷写到目标板上。"

#~ msgid ""
#~ "Use a USB CAN adapter (for example [https://hacker-"
#~ "gadgets.com/product/cantact-usb-can-adapter/](https://hacker-"
#~ "gadgets.com/product/cantact-usb-can-adapter/)). There are many different USB"
#~ " to CAN adapters available - when choosing one, we recommend verifying it "
#~ "can run the [candlelight firmware](https://github.com/candle-"
#~ "usb/candleLight_fw). (Unfortunately, we've found some USB adapters run "
#~ "defective firmware and are locked down, so verify before purchasing.)"
#~ msgstr ""
