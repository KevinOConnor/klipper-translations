# Fred Chan <fred2088@gmail.com>, 2022.
msgid ""
msgstr ""
"Report-Msgid-Bugs-To: yifeiding@protonmail.com\n"
"PO-Revision-Date: 2022-02-24 08:58+0000\n"
"Last-Translator: Fred Chan <fred2088@gmail.com>\n"
"Language-Team: Chinese (Traditional) <https://hosted.weblate.org/projects/"
"klipper/kinematics/zh_Hant/>\n"
"Language: zh_Hant\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Weblate 4.11-dev\n"

msgid ""
"This document provides an overview of how Klipper implements robot motion "
"(its [kinematics](https://en.wikipedia.org/wiki/Kinematics)). The contents "
"may be of interest to both developers interested in working on the Klipper "
"software as well as users interested in better understanding the mechanics "
"of their machines."
msgstr ""
"該文件提供Klipper實現機械[運動學](https://en.wikipedia.org/wiki/Kinematics)控制的概述，以供 "
"致力於完善Klipper的開發者 或 希望對自己的裝置的機械原理有進一步瞭解的愛好者 參考。"

msgid "Acceleration"
msgstr "加速"

msgid ""
"Klipper implements a constant acceleration scheme whenever the print head "
"changes velocity - the velocity is gradually changed to the new speed "
"instead of suddenly jerking to it. Klipper always enforces acceleration "
"between the tool head and the print. The filament leaving the extruder can "
"be quite fragile - rapid jerks and/or extruder flow changes lead to poor "
"quality and poor bed adhesion. Even when not extruding, if the print head is"
" at the same level as the print then rapid jerking of the head can cause "
"disruption of recently deposited filament. Limiting speed changes of the "
"print head (relative to the print) reduces risks of disrupting the print."
msgstr ""
"Klipper總使用常加速度策略——列印頭的速度總是梯度變化到新的速度，而非使用速度突變的方式。Klipper著眼於列印件和列印頭之間的速度變化。離開擠出"
"機的耗材十分脆弱，突然的移動速度和/或擠出流量突變可能會導致造成列印質量或床黏著能力的下降。甚至在無擠出時，如果列印頭和列印件頂端在同一水平面時，噴嘴的速"
"度突變有可能對剛擠出的耗材進行剮蹭。限制列印頭相對於列印件的速度，可以減少剮蹭列印件的風險。"

msgid ""
"It is also important to limit acceleration so that the stepper motors do not"
" skip or put excessive stress on the machine. Klipper limits the torque on "
"each stepper by virtue of limiting the acceleration of the print head. "
"Enforcing acceleration at the print head naturally also limits the torque of"
" the steppers that move the print head (the inverse is not always true)."
msgstr ""
"限制減速度也能減少步進電機丟步和炸機的狀況。Klipper通過限制列印頭的加速度來限制每個步進電機的力矩。限制列印頭的加速度自然也限制了移動列印頭的步進器"
"的扭矩（反之則不一定）。"

msgid ""
"Klipper implements constant acceleration. The key formula for constant "
"acceleration is:"
msgstr "Klipper實現恒加速度控制，關鍵的方程如下："

msgid "Trapezoid generator"
msgstr "梯形發生器"

msgid ""
"Klipper uses a traditional \"trapezoid generator\" to model the motion of "
"each move - each move has a start speed, it accelerates to a cruising speed "
"at constant acceleration, it cruises at a constant speed, and then "
"decelerates to the end speed using constant acceleration."
msgstr ""
"Klipper 使用傳統的\"梯形發生器\"來產生每個動作的運動--"
"每個動作都有一個起始速度，先恒定的加速度加速到一個巡航速度，再以恒定的速度巡航，最後用恒定的加速度減速到終點速度。"

msgid "![trapezoid](img/trapezoid.svg.png)"
msgstr "![trapezoid](img/trapezoid.svg.png)"

msgid ""
"It's called a \"trapezoid generator\" because a velocity diagram of the move"
" looks like a trapezoid."
msgstr "因為移動時的速度圖看起來像一個梯形，它被稱為 \"梯形發生器\"。"

msgid ""
"The cruising speed is always greater than or equal to both the start speed "
"and the end speed. The acceleration phase may be of zero duration (if the "
"start speed is equal to the cruising speed), the cruising phase may be of "
"zero duration (if the move immediately starts decelerating after "
"acceleration), and/or the deceleration phase may be of zero duration (if the"
" end speed is equal to the cruising speed)."
msgstr ""
"巡航速度總是大於等於起始和終端速度。加速度階段可能持續時間為0（如果起始速度等於巡航速度），巡航速度的持續時間也可為0（如果在加速結束后馬上進行減速），減"
"速階段也能為0（如果終端速度等於巡航速度）。"

msgid "![trapezoids](img/trapezoids.svg.png)"
msgstr "![trapezoids](img/trapezoids.svg.png)"

msgid "Look-ahead"
msgstr "預計算（look-ahead）"

msgid ""
"The \"look-ahead\" system is used to determine cornering speeds between "
"moves."
msgstr "拐角速度使用預計算系統進行處理。"

msgid "Consider the following two moves contained on an XY plane:"
msgstr "考慮以下兩個在 XY 平面上的移動："

msgid "![corner](img/corner.svg.png)"
msgstr "![corner](img/corner.svg.png)"

msgid ""
"In the above situation it is possible to fully decelerate after the first "
"move and then fully accelerate at the start of the next move, but that is "
"not ideal as all that acceleration and deceleration would greatly increase "
"the print time and the frequent changes in extruder flow would result in "
"poor print quality."
msgstr ""
"在上述的狀況下，印表機可以在第一步時減速至停止，並在第二步開始時加速至巡航速度。但這種運動策略並不理想，完全減速和完全加速會大幅增加列印時間，同時擠出量會"
"頻繁變動，從而導致列印質量的下降。"

msgid ""
"To solve this, the \"look-ahead\" mechanism queues multiple incoming moves "
"and analyzes the angles between moves to determine a reasonable speed that "
"can be obtained during the \"junction\" between two moves. If the next move "
"is nearly in the same direction then the head need only slow down a little "
"(if at all)."
msgstr ""
"要解決這種情況，klipper引入了預計算機制，預先依次計算後續的數個移動，分析其中的拐角並確定合適的拐角速度。如果下一步的速度與現時的移動速度相近，則滑"
"車速度僅會稍微減少。"

msgid "![lookahead](img/lookahead.svg.png)"
msgstr ""

msgid ""
"However, if the next move forms an acute angle (the head is going to travel "
"in nearly a reverse direction on the next move) then only a small junction "
"speed is permitted."
msgstr "然而，如果下一步形成一個尖銳的拐角（滑車將在下一步進行近於反方向的移動），則只能採用一個很低的拐角速度。"

msgid "![lookahead](img/lookahead-slow.svg.png)"
msgstr ""

msgid ""
"The junction speeds are determined using \"approximated centripetal "
"acceleration\". Best [described by the "
"author](https://onehossshay.wordpress.com/2011/09/24/improving_grbl_cornering_algorithm/)."
" However, in Klipper, junction speeds are configured by specifying the "
"desired speed that a 90° corner should have (the \"square corner "
"velocity\"), and the junction speeds for other angles are derived from that."
msgstr ""

msgid "Key formula for look-ahead:"
msgstr "預計算的關鍵方程："

msgid "Smoothed look-ahead"
msgstr "預計算結果平滑"

msgid ""
"Klipper also implements a mechanism for smoothing out the motions of short "
"\"zigzag\" moves. Consider the following moves:"
msgstr "Klipper 實現了一種用於平滑短距離之字形移動的機制。參考以下移動："

msgid "![zigzag](img/zigzag.svg.png)"
msgstr ""

msgid ""
"In the above, the frequent changes from acceleration to deceleration can "
"cause the machine to vibrate which causes stress on the machine and "
"increases the noise. To reduce this, Klipper tracks both regular move "
"acceleration as well as a virtual \"acceleration to deceleration\" rate. "
"Using this system, the top speed of these short \"zigzag\" moves are limited"
" to smooth out the printer motion:"
msgstr ""

msgid "![smoothed](img/smoothed.svg.png)"
msgstr ""

msgid ""
"Specifically, the code calculates what the velocity of each move would be if"
" it were limited to this virtual \"acceleration to deceleration\" rate (half"
" the normal acceleration rate by default). In the above picture the dashed "
"gray lines represent this virtual acceleration rate for the first move. If a"
" move can not reach its full cruising speed using this virtual acceleration "
"rate then its top speed is reduced to the maximum speed it could obtain at "
"this virtual acceleration rate. For most moves the limit will be at or above"
" the move's existing limits and no change in behavior is induced. For short "
"zigzag moves, however, this limit reduces the top speed. Note that it does "
"not change the actual acceleration within the move - the move continues to "
"use the normal acceleration scheme up to its adjusted top-speed."
msgstr ""

msgid "Generating steps"
msgstr ""

msgid ""
"Once the look-ahead process completes, the print head movement for the given"
" move is fully known (time, start position, end position, velocity at each "
"point) and it is possible to generate the step times for the move. This "
"process is done within \"kinematic classes\" in the Klipper code. Outside of"
" these kinematic classes, everything is tracked in millimeters, seconds, and"
" in cartesian coordinate space. It's the task of the kinematic classes to "
"convert from this generic coordinate system to the hardware specifics of the"
" particular printer."
msgstr ""

msgid ""
"Klipper uses an [iterative solver](https://en.wikipedia.org/wiki/Root-"
"finding_algorithm) to generate the step times for each stepper. The code "
"contains the formulas to calculate the ideal cartesian coordinates of the "
"head at each moment in time, and it has the kinematic formulas to calculate "
"the ideal stepper positions based on those cartesian coordinates. With these"
" formulas, Klipper can determine the ideal time that the stepper should be "
"at each step position. The given steps are then scheduled at these "
"calculated times."
msgstr ""

msgid ""
"The key formula to determine how far a move should travel under constant "
"acceleration is:"
msgstr ""

msgid "and the key formula for movement with constant velocity is:"
msgstr ""

msgid ""
"The key formulas for determining the cartesian coordinate of a move given a "
"move distance is:"
msgstr ""

msgid "Cartesian Robots"
msgstr ""

msgid ""
"Generating steps for cartesian printers is the simplest case. The movement "
"on each axis is directly related to the movement in cartesian space."
msgstr ""

msgid "Key formulas:"
msgstr ""

msgid "CoreXY Robots"
msgstr ""

msgid ""
"Generating steps on a CoreXY machine is only a little more complex than "
"basic cartesian robots. The key formulas are:"
msgstr ""

msgid "Delta Robots"
msgstr ""

msgid "Step generation on a delta robot is based on Pythagoras's theorem:"
msgstr ""

msgid "Stepper motor acceleration limits"
msgstr ""

msgid ""
"With delta kinematics it is possible for a move that is accelerating in "
"cartesian space to require an acceleration on a particular stepper motor "
"greater than the move's acceleration. This can occur when a stepper arm is "
"more horizontal than vertical and the line of movement passes near that "
"stepper's tower. Although these moves could require a stepper motor "
"acceleration greater than the printer's maximum configured move "
"acceleration, the effective mass moved by that stepper would be smaller. "
"Thus the higher stepper acceleration does not result in significantly higher"
" stepper torque and it is therefore considered harmless."
msgstr ""

msgid ""
"However, to avoid extreme cases, Klipper enforces a maximum ceiling on "
"stepper acceleration of three times the printer's configured maximum move "
"acceleration. (Similarly, the maximum velocity of the stepper is limited to "
"three times the maximum move velocity.) In order to enforce this limit, "
"moves at the extreme edge of the build envelope (where a stepper arm may be "
"nearly horizontal) will have a lower maximum acceleration and velocity."
msgstr ""

msgid "Extruder kinematics"
msgstr ""

msgid ""
"Klipper implements extruder motion in its own kinematic class. Since the "
"timing and speed of each print head movement is fully known for each move, "
"it's possible to calculate the step times for the extruder independently "
"from the step time calculations of the print head movement."
msgstr ""

msgid ""
"Basic extruder movement is simple to calculate. The step time generation "
"uses the same formulas that cartesian robots use:"
msgstr ""

msgid "Pressure advance"
msgstr "壓力提前"

msgid ""
"Experimentation has shown that it's possible to improve the modeling of the "
"extruder beyond the basic extruder formula. In the ideal case, as an "
"extrusion move progresses, the same volume of filament should be deposited "
"at each point along the move and there should be no volume extruded after "
"the move. Unfortunately, it's common to find that the basic extrusion "
"formulas cause too little filament to exit the extruder at the start of "
"extrusion moves and for excess filament to extrude after extrusion ends. "
"This is often referred to as \"ooze\"."
msgstr ""

msgid "![ooze](img/ooze.svg.png)"
msgstr ""

msgid ""
"The \"pressure advance\" system attempts to account for this by using a "
"different model for the extruder. Instead of naively believing that each "
"mm^3 of filament fed into the extruder will result in that amount of mm^3 "
"immediately exiting the extruder, it uses a model based on pressure. "
"Pressure increases when filament is pushed into the extruder (as in [Hooke's"
" law](https://en.wikipedia.org/wiki/Hooke%27s_law)) and the pressure "
"necessary to extrude is dominated by the flow rate through the nozzle "
"orifice (as in [Poiseuille's "
"law](https://en.wikipedia.org/wiki/Poiseuille_law)). The key idea is that "
"the relationship between filament, pressure, and flow rate can be modeled "
"using a linear coefficient:"
msgstr ""

msgid ""
"See the [pressure advance](Pressure_Advance.md) document for information on "
"how to find this pressure advance coefficient."
msgstr ""

msgid ""
"The basic pressure advance formula can cause the extruder motor to make "
"sudden velocity changes. Klipper implements \"smoothing\" of the extruder "
"movement to avoid this."
msgstr ""

msgid "![pressure-advance](img/pressure-velocity.png)"
msgstr ""

msgid ""
"The above graph shows an example of two extrusion moves with a non-zero "
"cornering velocity between them. Note that the pressure advance system "
"causes additional filament to be pushed into the extruder during "
"acceleration. The higher the desired filament flow rate, the more filament "
"must be pushed in during acceleration to account for pressure. During head "
"deceleration the extra filament is retracted (the extruder will have a "
"negative velocity)."
msgstr ""

msgid ""
"The \"smoothing\" is implemented using a weighted average of the extruder "
"position over a small time period (as specified by the "
"`pressure_advance_smooth_time` config parameter). This averaging can span "
"multiple g-code moves. Note how the extruder motor will start moving prior "
"to the nominal start of the first extrusion move and will continue to move "
"after the nominal end of the last extrusion move."
msgstr ""

msgid "Key formula for \"smoothed pressure advance\":"
msgstr ""

msgid "velocity(time) = start_velocity + accel*time\n"
msgstr ""

msgid "end_velocity^2 = start_velocity^2 + 2*accel*move_distance\n"
msgstr ""

msgid "move_distance = (start_velocity + .5 * accel * move_time) * move_time\n"
msgstr ""

msgid "move_distance = cruise_velocity * move_time\n"
msgstr ""

msgid ""
"cartesian_x_position = start_x + move_distance * total_x_movement / total_movement\n"
"cartesian_y_position = start_y + move_distance * total_y_movement / total_movement\n"
"cartesian_z_position = start_z + move_distance * total_z_movement / total_movement\n"
msgstr ""

msgid ""
"stepper_x_position = cartesian_x_position\n"
"stepper_y_position = cartesian_y_position\n"
"stepper_z_position = cartesian_z_position\n"
msgstr ""

msgid ""
"stepper_a_position = cartesian_x_position + cartesian_y_position\n"
"stepper_b_position = cartesian_x_position - cartesian_y_position\n"
"stepper_z_position = cartesian_z_position\n"
msgstr ""

msgid ""
"stepper_position = (sqrt(arm_length^2\n"
"                         - (cartesian_x_position - tower_x_position)^2\n"
"                         - (cartesian_y_position - tower_y_position)^2)\n"
"                    + cartesian_z_position)\n"
msgstr ""

msgid "stepper_position = requested_e_position\n"
msgstr ""

msgid ""
"pa_position = nominal_position + pressure_advance_coefficient * "
"nominal_velocity\n"
msgstr ""

msgid ""
"smooth_pa_position(t) =\n"
"    ( definitive_integral(pa_position(x) * (smooth_time/2 - abs(t - x)) * dx,\n"
"                          from=t-smooth_time/2, to=t+smooth_time/2)\n"
"     / (smooth_time/2)^2 )\n"
msgstr ""

#: docs/Kinematics.md:block 1 (header)
msgid "Kinematics"
msgstr "運動學"
