# Максим Горпиніч <mgorpinic2005@gmail.com>, 2024.
msgid ""
msgstr ""
"Report-Msgid-Bugs-To: yifeiding@protonmail.com\n"
"PO-Revision-Date: 2024-11-05 21:00+0000\n"
"Last-Translator: Максим Горпиніч <mgorpinic2005@gmail.com>\n"
"Language-Team: Ukrainian <https://hosted.weblate.org/projects/klipper/debugging/uk/>\n"
"Language: uk\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=n%10==1 && n%100!=11 ? 0 : n%10>=2 && n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2;\n"
"X-Generator: Weblate 5.8.2\n"

msgid "This document describes some of the Klipper debugging tools."
msgstr "Цей документ описує деякі інструменти для відключення кліппера."

msgid "Translating gcode files to micro-controller commands"
msgstr "Перевантаження файлів gcode до команд мікроконтролера"

msgid ""
"The Klippy host code can run in a batch mode to produce the low-level micro-"
"controller commands associated with a gcode file. Inspecting these low-level "
"commands is useful when trying to understand the actions of the low-level "
"hardware. It can also be useful to compare the difference in micro-controller "
"commands after a code change."
msgstr ""
"Код хосту Klippy може працювати в пакетному режимі, щоб виробляти команди "
"мікроконтролера низького рівня, пов'язані з файлом gcode. Перевірка цих "
"низькорівневих команд корисно при спробі зрозуміти дії апаратного забезпечення"
" низького рівня. Також можна порівняти різницю в командах мікроконтролерів "
"після зміни коду."

msgid ""
"To run Klippy in this batch mode, there is a one time step necessary to "
"generate the micro-controller \"data dictionary\". This is done by compiling "
"the micro-controller code to obtain the **out/klipper.dict** file:"
msgstr ""
"Для запуску Klippy в цьому пакетному режимі існує один крок, необхідний для "
"створення мікроконтролера \" словник даних\". Це зроблено шляхом складання "
"мікроконтролюючого коду для отримання **out/klipper.dict** файл:"

msgid ""
"Once the above is done it is possible to run Klipper in batch mode (see "
"[installation](Installation.md) for the steps necessary to build the python "
"virtual environment and a printer.cfg file):"
msgstr ""
"Після того, як вище зроблено, можна запустити Klipper в пакетному режимі (див."
" [installation](Installation.md) для кроків, необхідних для побудови python "
"віртуального середовища і принтера.cfg файл):"

msgid ""
"The above will produce a file **test.serial** with the binary serial output. "
"This output can be translated to readable text with:"
msgstr ""
"Надійшла файл **test.serial** з бінарним серійним виходом. Цей вихід може бути"
" перекладений для читання тексту з:"

msgid ""
"The resulting file **test.txt** contains a human readable list of micro-"
"controller commands."
msgstr ""
"Отриманий файл **test.txt** містить читальний список команд мікроконтролера."

msgid ""
"The batch mode disables certain response / request commands in order to "
"function. As a result, there will be some differences between actual commands "
"and the above output. The generated data is useful for testing and inspection;"
" it is not useful for sending to a real micro-controller."
msgstr ""
"Пакетний режим відключає певну відповідь / команду запитів для функції. В "
"результаті будуть деякі відмінності між фактичними командами і вище виходом. "
"Згенеровані дані корисні для тестування та перевірки; не корисно для відправки"
" в реальний мікроконтролер."

msgid "Testing with simulavr"
msgstr "Тестування з simulavr"

msgid ""
"The [simulavr](http://www.nongnu.org/simulavr/) tool enables one to simulate "
"an Atmel ATmega micro-controller. This section describes how one can run test "
"gcode files through simulavr. It is recommended to run this on a desktop class"
" machine (not a Raspberry Pi) as it does require significant cpu to run "
"efficiently."
msgstr ""
"Інструмент [simulavr](http://www.nongnu.org/simulavr/) дозволяє змоделювати "
"мікроконтролер Atmel ATmega. Цей розділ описує, як можна запустити тестові "
"файли gcode через simulavr. Рекомендовано запустити це на машині для "
"настільного комп'ютера (не малиновий Пі), оскільки він вимагає значного cpu, "
"щоб ефективно працювати."

msgid "To compile Klipper for use in simulavr, run:"
msgstr "Для компіляції кліппера для використання в simulavr, запустіть:"

msgid ""
"Then, with simulavr running in another window, one can run the following to "
"read gcode from a file (eg, \"test.gcode\"), process it with Klippy, and send "
"it to Klipper running in simulavr (see [installation](Installation.md) for the"
" steps necessary to build the python virtual environment):"
msgstr ""
"Потім, з simulavr, що працює в іншому вікні, можна запустити наступне, щоб "
"читати gcode з файлу (наприклад, \"test.gcode\"), обробити його за допомогою "
"Klippy, і відправити його на Klipper, що працює в simulavr (див. "
"[installation](Installation.md) за кроки, необхідні для побудови python "
"віртуального середовища):"

msgid "Using simulavr with gtkwave"
msgstr "Використання simulavr з gtkwave"

msgid ""
"One useful feature of simulavr is its ability to create signal wave generation"
" files with the exact timing of events. To do this, follow the directions "
"above, but run avrsim.py with a command-line like the following:"
msgstr ""
"Однією корисною особливістю simulavr є можливість створення файлів генерації "
"сигналів за допомогою точного часу подій. Для цього слідуйте за напрямами "
"вище, але запустіть avrsim.py з командним рядком, як:"

msgid ""
"The above would create a file **avrsim.vcd** with information on each change "
"to the GPIOs on PORTA and PORTB. This could then be viewed using gtkwave with:"
msgstr ""
"Надійшла б створити файл **avrsim.vcd** з інформацією про кожну зміну GPIO на "
"PORTA і PORTB. Це можна переглянути за допомогою gtkwave з:"

msgid "Manually sending commands to the micro-controller"
msgstr "Ручна відправка команд до мікроконтролера"

msgid ""
"Normally, the host klippy.py process would be used to translate gcode commands"
" to Klipper micro-controller commands. However, it's also possible to manually"
" send these MCU commands (functions marked with the DECL_COMMAND() macro in "
"the Klipper source code). To do so, run:"
msgstr ""
"Нормально, хост кліппи. py процес буде використовуватися для перекладу команд "
"gcode до команди мікроконтролерів Klipper. Тим не менш, можна вручну надсилати"
" ці команди МКУ (функції, позначені макросом DECL_COMMAND() у коді джерела "
"Klipper). Для цього запустіть:"

msgid ""
"See the \"HELP\" command within the tool for more information on its "
"functionality."
msgstr ""
"Переглядайте команду \"HELP\" в інструменті для отримання додаткової "
"інформації про його функціонал."

msgid ""
"Some command-line options are available. For more information run: `~/klippy-"
"env/bin/python ./klippy/console.py --help`"
msgstr ""
"Деякі параметри командного рядка доступні. Для отримання додаткової інформації"
" запустіть: ` ~/klippy-env/bin/python ./klippy/console.py --help`"

msgid "Generating load graphs"
msgstr "Формування графіків навантаження"

msgid ""
"The Klippy log file (/tmp/klippy.log) stores statistics on bandwidth, micro-"
"controller load, and host buffer load. It can be useful to graph these "
"statistics after a print."
msgstr ""
"Файл журналу Klippy (/tmp/klippy.log) зберігає статистику на пропускній "
"здатності, навантаження мікроконтролера та навантаження на буфер. Надрукуйте "
"цю статистику."

msgid ""
"To generate a graph, a one time step is necessary to install the "
"\"matplotlib\" package:"
msgstr "Для створення графіка необхідно встановити пакет «матплотліб»:"

msgid "Then graphs can be produced with:"
msgstr "Потім графіки можуть бути виготовлені з:"

msgid "One can then view the resulting **loadgraph.png** file."
msgstr "Потім можна переглянути отриманий **loadgraph.png** файл."

msgid ""
"Different graphs can be produced. For more information run: "
"`~/klipper/scripts/graphstats.py --help`"
msgstr "Виготовлені різні графіки. `~/klipper/scripts/graphstats.py --help`"

msgid "Extracting information from the klippy.log file"
msgstr "Вилучення інформації з кліппи. Лог файл"

msgid ""
"The Klippy log file (/tmp/klippy.log) also contains debugging information. "
"There is a logextract.py script that may be useful when analyzing a micro-"
"controller shutdown or similar problem. It is typically run with something "
"like:"
msgstr ""
"Файл журналу Klippy (/tmp/klippy.log) також містить інформацію про видалення. "
"Є логекстракт. py скрипт, який може бути корисний при аналізі відключення "
"мікроконтролерів або аналогічної проблеми. Це зазвичай працює з тим, що:"

msgid ""
"The script will extract the printer config file and will extract MCU shutdown "
"information. The information dumps from an MCU shutdown (if present) will be "
"reordered by timestamp to assist in diagnosing cause and effect scenarios."
msgstr ""
"Скрипт буде витягти файл налаштування принтера і буде витягувати інформацію "
"про вимкнення MCU. Інформація про відключення від MCU (за наявності) буде "
"направлена на своєчасну допомогу при діагностуванні причин і сценаріїв впливу."

msgid "Running the regression tests"
msgstr "Запуск регресивних випробувань"

msgid ""
"The main Klipper GitHub repository uses \"github actions\" to run a series of "
"regression tests. It can be useful to run some of these tests locally."
msgstr ""
"Головний репозиторій Klipper GitHub використовує \"github дії\" для запуску "
"серії регресивних тестів. Це може бути корисним для того, щоб запустити деякі "
"ці тести локально."

msgid "The source code \"whitespace check\" can be run with:"
msgstr ""
"Введіть номер мобільного, який Ви вказали при укладаннi договору з банком - "
"для ідентифікації:"

#: docs/Debugging.md:block 1 (header)
msgid "Debugging"
msgstr "Розгортання"

#: docs/Debugging.md:block 24 (header)
msgid "Motion analysis and data logging"
msgstr "Аналіз та аналіз даних"

#: docs/Debugging.md:block 25 (paragraph)
msgid ""
"Klipper supports logging its internal motion history, which can be later "
"analyzed. To use this feature, Klipper must be started with the [API "
"Server](API_Server.md) enabled."
msgstr ""
"Кліппер зберігає історію внутрішнього руху, яка може бути пізніше "
"проаналізована. Щоб скористатися цією функцією, Klipper повинен бути запущений"
" з [API сервер](API_Server.md) включений."

#: docs/Debugging.md:block 26 (paragraph)
msgid "Data logging is enabled with the `data_logger.py` tool. For example:"
msgstr "Увімкнення даних увімкнено `data_logger.py` інструментом. Наприклад:"

#: docs/Debugging.md:block 28 (paragraph)
msgid ""
"This command will connect to the Klipper API Server, subscribe to status and "
"motion information, and log the results. Two files are generated - a "
"compressed data file and an index file (eg, `mylog.json.gz` and "
"`mylog.index.gz`). After starting the logging, it is possible to complete "
"prints and other actions - the logging will continue in the background. When "
"done logging, hit `ctrl-c` to exit from the `data_logger.py` tool."
msgstr ""
"Ця команда буде підключена до сервера Klipper API, підписатися на інформацію "
"про стан та рух, а також записувати результати. Два файли створюються - "
"стиснений файл даних і індексний файл (наприклад, `mylog.json.gz` і "
"`mylog.index.gz`. Після запуску залоги можна завершити друку і інші дії - "
"заправка буде продовжуватися на фоні. Коли це зроблено журнал, натисніть "
"`ctrl-c`, щоб вийти з `data_logger.py` інструмент."

#: docs/Debugging.md:block 29 (paragraph)
msgid ""
"The resulting files can be read and graphed using the `motan_graph.py` tool. "
"To generate graphs on a Raspberry Pi, a one time step is necessary to install "
"the \"matplotlib\" package:"
msgstr ""
"Отримані файли можна прочитати і розрахувати за допомогою інструменту "
"`motan_graph.py`. Для створення графіків на Малиновій Пі необхідно встановити "
"пакет «матплотин»:"

#: docs/Debugging.md:block 31 (paragraph)
msgid ""
"However, it may be more convenient to copy the data files to a desktop class "
"machine along with the Python code in the `scripts/motan/` directory. The "
"motion analysis scripts should run on any machine with a recent version of "
"[Python](https://python.org) and [Matplotlib](https://matplotlib.org/) "
"installed."
msgstr ""
"Тим не менш, це може бути зручніше скопіювати файли даних в машині для "
"настільного комп'ютера поряд з кодом Python в каталозі `scripts/motan/`. "
"Скрипки аналізу руху повинні працювати на будь-якій машині з останню версію "
"[Python](https://python.org) і [Matplotlib](https://matplotlib.org/) "
"встановлених."

#: docs/Debugging.md:block 32 (paragraph)
msgid "Graphs can be generated with a command like the following:"
msgstr "Графіки можна створювати за допомогою команди:"

#: docs/Debugging.md:block 34 (paragraph)
msgid ""
"One can use the `-g` option to specify the datasets to graph (it takes a "
"Python literal containing a list of lists). For example:"
msgstr ""
"Один може використовувати параметр `-g`, щоб вказати дані до графіка (це "
"займає літера Python, що містить список списків). Наприклад:"

#: docs/Debugging.md:block 36 (paragraph)
msgid ""
"The list of available datasets can be found using the `-l` option - for "
"example:"
msgstr ""
"Перелік доступних даних можна знайти за допомогою параметра `-l` - наприклад:"

#: docs/Debugging.md:block 38 (paragraph)
msgid "It is also possible to specify matplotlib plot options for each dataset:"
msgstr "Також можна вказати параметри матоплотліба для кожного набору даних:"

#: docs/Debugging.md:block 40 (paragraph)
msgid ""
"Many matplotlib options are available; some examples are \"color\", \"label\","
" \"alpha\", and \"linestyle\"."
msgstr ""
"Багато варіантів матоплотліба доступні; деякі приклади - \"колір\", \"лабор\","
" \"alpha\", \"linestyle\"."

#: docs/Debugging.md:block 41 (paragraph)
msgid ""
"The `motan_graph.py` tool supports several other command-line options - use "
"the `--help` option to see a list. It may also be convenient to view/modify "
"the [motan_graph.py](../scripts/motan/motan_graph.py) script itself."
msgstr ""
"Інструмент `motan_graph.py` підтримує кілька інших параметрів командного рядка"
" - використовуйте параметр `--help`, щоб переглянути список. Також може бути "
"зручно переглянути/змінити сам сценарій "
"[motan_graph.py](../scripts/motan/motan_graph.py)."

#: docs/Debugging.md:block 61 (paragraph)
msgid ""
"and compile the micro-controller software for an AVR atmega644p and select "
"SIMULAVR software emulation support. Then one can compile Klipper (run `make`)"
" and then start the simulation with:"
msgstr ""
"і компіляція програмного забезпечення для AVR atmega644p і виберіть підтримку "
"емуляції програмного забезпечення SIMULAVR. Потім можна компілювати Кліппер "
"(біг `make`), а потім почати моделювання з:"

#: docs/Debugging.md:block 7 (paragraph)
msgid ""
"The Klippy regression test suite requires \"data dictionaries\" from many "
"platforms. The easiest way to obtain them is to [download them from "
"github](https://github.com/Klipper3d/klipper/issues/1438). Once the data "
"dictionaries are downloaded, use the following to run the regression suite:"
msgstr ""
"Тест-пакет Klippy вимагає \"Дика даних\" від багатьох платформ. Найпростіший "
"спосіб отримати їх можна [завантажити їх з "
"github](https://github.com/Klipper3d/klipper/products/1438). Після того, як "
"завантажуються дані, скористайтеся наступним чином, щоб запустити вихідний "
"пакет:"

#: docs/Debugging.md:block 42 (paragraph)
msgid ""
"The raw data logs produced by the `data_logger.py` tool follow the format "
"described in the [API Server](API_Server.md). It may be useful to inspect the "
"data with a Unix command like the following: `gunzip < mylog.json.gz | tr "
"'\\03' '\\n' | less`"
msgstr ""
"Сирі журнали даних, що виробляються `data_logger.py` інструмент слідувати за "
"форматом, описаним в [API Server](API_Server.md). Це може бути корисним для "
"перегляду даних з командуванням Unix, таких як: `gunzip < mylog.json.gz tr "
"'\\03' '\\n' `"

#: docs/Debugging.md:block 57 (paragraph)
msgid ""
"To use simulavr, download the simulavr package and compile with python "
"support. Note that the build system may need to have some packages (such as "
"swig) installed in order to build the python module."
msgstr ""
"Для використання simulavr, завантажити пакет simulavr і компілювати з "
"підтримкою python. Зауважте, що система побудови може мати деякі пакети "
"(наприклад, перемикач), встановлені для того, щоб побудувати модуль python."

#: docs/Debugging.md:block 59 (paragraph)
msgid ""
"Make sure a file like **./build/pysimulavr/_pysimulavr.*.so** is present after"
" the above compilation:"
msgstr ""
"Переконайтеся, що файл, як **./build/pysimulavr/_pysimulavr.*.so** присутній "
"після вищезгаданого збірника:"

#: docs/Debugging.md:block 62 (paragraph)
msgid ""
"If you are on a Debian-based system (Debian, Ubuntu, etc.) you can install the"
" following packages and generate *.deb files for system-wide installation of "
"simulavr:"
msgstr ""
"Якщо ви перебуваєте на системі Debian (Debian, Ubuntu і т.д.) ви можете "
"встановити наступні пакети і генерувати *.deb файли для системної установки "
"simulavr:"

#: docs/Debugging.md:block 68 (paragraph)
msgid ""
"Note that if you have installed python3-simulavr system-wide, you do not need "
"to set `PYTHONPATH`, and can simply run the simulator as"
msgstr ""
"Зверніть увагу, що якщо ви встановили python3-simulavr системно-широтою, вам "
"не потрібно встановити `PYTHONPATH`, і може просто запустити тренажер як"

#: docs/Debugging.md:block 61 (paragraph)
msgid ""
"This command should report a specific file (e.g. "
"**./build/pysimulavr/_pysimulavr.cpython-39-x86_64-linux-gnu.so**) and not an "
"error."
msgstr ""
"Ця команда повинна повідомити конкретний файл (наприклад, "
"**./build/pysimulavr/_pysimulavr.cpython-39-x86_64-linux-gnu.so**) і не "
"помилитися."

#~ msgid ""
#~ "make menuconfig\n"
#~ "make\n"
#~ msgstr ""
#~ "налаштування меню\n"
#~ "зроби\n"

#~ msgid ""
#~ "~/klippy-env/bin/python ./klippy/klippy.py ~/printer.cfg -i test.gcode -o "
#~ "test.serial -v -d out/klipper.dict\n"
#~ msgstr ""
#~ "~/klippy-env/bin/python ./klippy/klippy.py ~/printer.cfg -i тест.gcode -o "
#~ "тест. -v -d/klipper.dict\n"

#~ msgid ""
#~ "~/klippy-env/bin/python ./klippy/parsedump.py out/klipper.dict test.serial > "
#~ "test.txt\n"
#~ msgstr ""
#~ "~/klippy env/bin/python ./klippy/parsedump.py out/klipper.dict test.serial > "
#~ "test.txt\n"

#~ msgid ""
#~ "~/klippy-env/bin/python ./klippy/klippy.py config/generic-simulavr.cfg -i "
#~ "test.gcode -v\n"
#~ msgstr ""
#~ "~/klippy-env/bin/python ./klippy/klippy.py javascript licenses api веб-сайт "
#~ "go1.13.8 -i тест.gcode -р\n"

#~ msgid "gtkwave avrsim.vcd\n"
#~ msgstr "Gtkwave avrsim.vcd\n"

#~ msgid "~/klippy-env/bin/python ./klippy/console.py /tmp/pseudoserial\n"
#~ msgstr "~/klippy-env/bin/python ./klippy/console.py/tmp/pseudoserial\n"

#~ msgid ""
#~ "sudo apt-get update\n"
#~ "sudo apt-get install python-matplotlib\n"
#~ msgstr ""
#~ "sudo apt-get оновлення\n"
#~ "sudo apt-get встановити python-matplotlib\n"

#~ msgid "~/klipper/scripts/graphstats.py /tmp/klippy.log -o loadgraph.png\n"
#~ msgstr ""
#~ "javascript licenses api веб-сайт go1.13.8 javascript licenses api веб-сайт "
#~ "go1.13.8\n"

#~ msgid ""
#~ "mkdir work_directory\n"
#~ "cd work_directory\n"
#~ "cp /tmp/klippy.log .\n"
#~ "~/klipper/scripts/logextract.py ./klippy.log\n"
#~ msgstr ""
#~ "mkdir work_directory\n"
#~ "cd work_directory\n"
#~ "javascript licenses api веб-сайт go1.13.8\n"
#~ "javascript licenses api веб-сайт go1.13.8\n"

#~ msgid "./scripts/check_whitespace.sh\n"
#~ msgstr "./scripts/Check_whitespace.sh\n"

#~ msgid ""
#~ "tar xfz klipper-dict-20??????.tar.gz\n"
#~ "~/klippy-env/bin/python ~/klipper/scripts/test_klippy.py -d dict/ ~/klipper/test/klippy/*.test\n"
#~ msgstr ""
#~ "tar xfz klipper-dict-20 ???????????????.tar.gz\n"
#~ "~/klippy-env/bin/python ~/klipper/scripts/test_klippy.py -d дикт/ ~/klipper/test/klippy/*.test\n"

#~ msgid "~/klipper/scripts/motan/data_logger.py /tmp/klippy_uds mylog\n"
#~ msgstr "javascript licenses api веб-сайт go1.13.8 /tmp/klippy_uds mylog\n"

#~ msgid "~/klipper/scripts/motan/motan_graph.py mylog -o mygraph.png\n"
#~ msgstr "~/klipper/scripts/motan/ motan_graph.py mylog -o mygraph.png\n"

#~ msgid ""
#~ "~/klipper/scripts/motan/motan_graph.py mylog -g "
#~ "'[[\"trapq(toolhead,velocity)\"], [\"trapq(toolhead,accel)\"]]'\n"
#~ msgstr ""
#~ "~/klipper/scripts/motan/motan_graph.py mylog -g "
#~ "\"[[\"trapq(toolhead,velocity)\"], [\"trapq(toolhead,accel)\"]] р\n"

#~ msgid "~/klipper/scripts/motan/motan_graph.py -l\n"
#~ msgstr "~/klipper/scripts/motan/ motan_graph.py -l\n"

#~ msgid ""
#~ "~/klipper/scripts/motan/motan_graph.py mylog -g "
#~ "'[[\"trapq(toolhead,velocity)?color=red&alpha=0.4\"]]'\n"
#~ msgstr ""
#~ "~/klipper/scripts/motan/motan_graph.py mylog -g "
#~ "\"[[\"trapq(toolhead,velocity)?color=red&alpha=0.4\"]] р\n"

#~ msgid ""
#~ "cd /path/to/klipper\n"
#~ "make menuconfig\n"
#~ msgstr ""
#~ "javascript licenses api веб-сайт go1.13.8\n"
#~ "налаштування меню\n"

#~ msgid ""
#~ "PYTHONPATH=/path/to/simulavr/src/python/ ./scripts/avrsim.py out/klipper.elf "
#~ "-t PORTA.PORT,PORTC.PORT\n"
#~ msgstr ""
#~ "PYTHONPATH=/path/to/simulavr/src/python/ ./scripts/avrsim.py out/klipper.elf "
#~ "-t PORTA.PORT,PORTC. ПОРТ\n"

#~ msgid ""
#~ "git clone git://git.savannah.nongnu.org/simulavr.git\n"
#~ "cd simulavr\n"
#~ "make python\n"
#~ "make build\n"
#~ msgstr ""
#~ "git clone git://git.savannah.nongnu.org/simulavr.git\n"
#~ "cd simulavr\n"
#~ "зробити пітон\n"
#~ "зробити будівництво\n"

#~ msgid "ls ./build/pysimulavr/_pysimulavr.*.so\n"
#~ msgstr "лс ./build/pysimulavr/_pysimulavr.*.so\n"

#~ msgid ""
#~ "sudo apt update\n"
#~ "sudo apt install g++ make cmake swig rst2pdf help2man texinfo\n"
#~ "make cfgclean python debian\n"
#~ "sudo dpkg -i build/debian/python3-simulavr*.deb\n"
#~ msgstr ""
#~ "sudo apt оновлення\n"
#~ "sudo apt встановити g++ завантажити плагін - pdf\n"
#~ "зробити cfgclean python debian\n"
#~ "код товару: dpkg -і build/debian/python3-simulavr*.deb\n"

#~ msgid ""
#~ "PYTHONPATH=/path/to/simulavr/build/pysimulavr/ ./scripts/avrsim.py "
#~ "out/klipper.elf\n"
#~ msgstr ""
#~ "PYTHONPATH=/path/to/simulavr/build/pysimulavr/ JavaScript licenses API Веб-"
#~ "сайт Go1.13.8\n"

#~ msgid "./scripts/avrsim.py out/klipper.elf\n"
#~ msgstr "./scripts/avrsim.py out/ klipper.elf\n"

#~ msgid ""
#~ "This commmand should report a specific file (e.g. "
#~ "**./build/pysimulavr/_pysimulavr.cpython-39-x86_64-linux-gnu.so**) and not an "
#~ "error."
#~ msgstr ""

#~ msgid ""
#~ "To use simulavr, download the simulavr package and compile with python "
#~ "support:"
#~ msgstr ""

#~ msgid ""
#~ "Note that the build system may need to have some packages (such as swig) "
#~ "installed in order to build the python module. Make sure the file "
#~ "**src/python/_pysimulavr.so** is present after the above compilation."
#~ msgstr ""

#~ msgid ""
#~ "git clone git://git.savannah.nongnu.org/simulavr.git\n"
#~ "cd simulavr\n"
#~ "./bootstrap\n"
#~ "./configure --enable-python\n"
#~ "make\n"
#~ msgstr ""

#~ msgid ""
#~ "PYTHONPATH=/path/to/simulavr/src/python/ ./scripts/avrsim.py out/klipper.elf\n"
#~ msgstr ""

#~ msgid ""
#~ "The Klippy regression test suite requires \"data dictionaries\" from many "
#~ "platforms. The easiest way to obtain them is to [download them from "
#~ "github](https://github.com/KevinOConnor/klipper/issues/1438). Once the data "
#~ "dictionaries are downloaded, use the following to run the regression suite:"
#~ msgstr ""

#~ msgid ""
#~ "and compile the micro-controller software for an AVR atmega644p, set the MCU "
#~ "frequency to 20Mhz, and select SIMULAVR software emulation support. Then one "
#~ "can compile Klipper (run `make`) and then start the simulation with:"
#~ msgstr ""

#~ msgid ""
#~ "cd /patch/to/klipper\n"
#~ "make menuconfig\n"
#~ msgstr ""

#~ msgid ""
#~ "PYTHONPATH=/path/to/simulavr/src/python/ ./scripts/avrsim.py -m atmega644 -s "
#~ "20000000 -b 250000 out/klipper.elf\n"
#~ msgstr ""

#~ msgid ""
#~ "PYTHONPATH=/path/to/simulavr/src/python/ ./scripts/avrsim.py -m atmega644 -s "
#~ "20000000 -b 250000 out/klipper.elf -t PORTA.PORT,PORTC.PORT\n"
#~ msgstr ""
