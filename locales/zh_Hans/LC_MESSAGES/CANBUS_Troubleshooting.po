# Hosted Weblate <mfvotmjhcj@iubridge.com>, 2024.
# hani-lengxi <2836842270@qq.com>, 2024.
msgid ""
msgstr ""
"Report-Msgid-Bugs-To: yifeiding@protonmail.com\n"
"PO-Revision-Date: 2024-11-30 15:00+0000\n"
"Last-Translator: hani-lengxi <2836842270@qq.com>\n"
"Language-Team: Chinese (Simplified Han script) <https://hosted.weblate.org/projects/klipper/canbus_troubleshooting/zh_Hans/>\n"
"Language: zh_Hans\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Weblate 5.9-dev\n"

#: docs/CANBUS_Troubleshooting.md:block 1 (header)
msgid "CANBUS Troubleshooting"
msgstr "CanBus故障排除"

#: docs/CANBUS_Troubleshooting.md:block 2 (paragraph)
msgid ""
"This document provides information on troubleshooting communication issues "
"when using [Klipper with CAN bus](CANBUS.md)."
msgstr "本文档提供了使用[Klipper with CAN Bus](CANBUS.md)时通信问题的故障排除信息。"

#: docs/CANBUS_Troubleshooting.md:block 3 (header)
msgid "Verify CAN bus wiring"
msgstr "验证CAN总线布线"

#: docs/CANBUS_Troubleshooting.md:block 4 (paragraph)
msgid ""
"The first step in troubleshooting communication issues is to verify the CAN "
"bus wiring."
msgstr "排除通信故障的第一步是验证CAN总线布线。"

#: docs/CANBUS_Troubleshooting.md:block 5 (paragraph)
msgid ""
"Be sure there are exactly two 120 Ohm [terminating "
"resistors](CANBUS.md#terminating-resistors) on the CAN bus. If the resistors "
"are not properly installed then messages may not be able to be sent at all or "
"the connection may have sporadic instability."
msgstr ""
"确保CAN总线上恰好有两个120欧姆[终端电阻](CANBUS.md#终端电阻)。如果没有正确安装电阻器，则可能根本无法发送消息，或者连接可能有零星的不稳定。"

#: docs/CANBUS_Troubleshooting.md:block 6 (paragraph)
msgid ""
"The CANH and CANL bus wiring should be twisted around each other. At a "
"minimum, the wiring should have a twist every few centimeters. Avoid twisting "
"the CANH and CANL wiring around power wires and ensure that power wires that "
"travel parallel to the CANH and CANL wires do not have the same amount of "
"twists."
msgstr ""
"CANH和CANL母线应相互缠绕。至少，电线每隔几厘米就应该有一次绞合。避免将CANH和CALL电线缠绕在电源线周围，并确保平行于CANH和CALL电线的电源线没有相同的扭转量。"

#: docs/CANBUS_Troubleshooting.md:block 7 (paragraph)
msgid ""
"Verify that all plugs and wire crimps on the CAN bus wiring are fully secured."
" Movement of the printer toolhead may jostle the CAN bus wiring causing a bad "
"wire crimp or unsecured plug to result in intermittent communication errors."
msgstr ""
"确认CAN总线接线上的所有插头和线夹都已完全固定。打印机刀头的移动可能会挤压CAN总线布线，导致不良的线缆卷曲或未固定的插头，从而导致间歇性通信错误。"

#: docs/CANBUS_Troubleshooting.md:block 8 (header)
msgid "Check for incrementing bytes_invalid counter"
msgstr "检查递增BYTES_INVALID计数器"

#: docs/CANBUS_Troubleshooting.md:block 9 (paragraph)
msgid ""
"The Klipper log file will report a `Stats` line once a second when the printer"
" is active. These \"Stats\" lines will have a `bytes_invalid` counter for each"
" micro-controller. This counter should not increment during normal printer "
"operation (it is normal for the counter to be non-zero after a RESTART and it "
"is not a concern if the counter increments once a month or so). If this "
"counter increments on a CAN bus micro-controller during normal printing (it "
"increments every few hours or more frequently) then it is an indication of a "
"severe problem."
msgstr ""
"当打印机处于活动状态时，Klipper日志文件将每秒报告一次`Stats‘行。对于每个微控制器，这些“Stat”行都将有一个`bytes_valid`计数器。在正常的打印机操作期间，此计数器不应递增(重新启动后计数器为非零值是正常的，如果计数器每月递增一次也无关紧要)。如果在正常打印过程中，CAN"
" Bus微控制器上的此计数器增加(每隔几个小时或更频繁地增加一次)，则表示存在严重问题。"

#: docs/CANBUS_Troubleshooting.md:block 10 (paragraph)
msgid ""
"Incrementing `bytes_invalid` on a CAN bus connection is a symptom of reordered"
" messages on the CAN bus. There are two known causes of reordered messages:"
msgstr "在CAN总线连接上递增`BYTES_INVALID`是CAN总线上消息重新排序的症状。消息重新排序有两个已知原因："

#: docs/CANBUS_Troubleshooting.md:block 11 (ordered list)
msgid ""
"Old versions of the popular candlight_firmware for USB CAN adapters had a bug "
"that could cause reordered messages. If using a USB CAN adapter running this "
"firmware then make sure to update to the latest firmware if incrementing "
"`bytes_invalid` is observed."
msgstr ""
"用于USB CAN适配器的常用烛光固件的旧版本有一个错误，可能会导致消息重新排序。如果使用运行此固件的USB "
"CAN适配器，则在观察到递增的`Bytes_Invalid`时，请确保更新到最新固件。"

#: docs/CANBUS_Troubleshooting.md:block 11 (ordered list)
msgid ""
"Some Linux kernel builds for embedded devices have been known to reorder CAN "
"bus messages. It may be necessary to use an alternative Linux kernel or to use"
" alternative hardware that supports mainstream Linux kernels that do not "
"exhibit this problem."
msgstr ""
"已知一些用于嵌入式设备的Linux内核版本会对CAN总线消息进行重新排序。可能需要使用替代的Linux内核，或者使用支持不存在此问题的主流Linux内核的替代硬件。"

#: docs/CANBUS_Troubleshooting.md:block 12 (paragraph)
msgid ""
"Reordered messages is a severe problem that must be fixed. It will result in "
"unstable behavior and can lead to confusing errors at any part of a print."
msgstr "重新排序的消息是一个必须解决的严重问题。这将导致行为不稳定，并可能导致打印的任何部分出现令人困惑的错误。"

#: docs/CANBUS_Troubleshooting.md:block 13 (header)
msgid "Obtaining candump logs"
msgstr "获取candump日志"

#: docs/CANBUS_Troubleshooting.md:block 14 (paragraph)
msgid ""
"The CAN bus messages sent to and from the micro-controller are handled by the "
"Linux kernel. It is possible to capture these messages from the kernel for "
"debugging purposes. A log of these messages may be of use in diagnostics."
msgstr "向微控制器发送和从微控制器发送的CAN总线消息由Linux内核处理。出于调试目的，可以从内核捕获这些消息。这些消息的日志可能在诊断中有用。"

#: docs/CANBUS_Troubleshooting.md:block 15 (paragraph)
msgid ""
"The Linux [can-utils](https://github.com/linux-can/can-utils) tool provides "
"the capture software. It is typically installed on a machine by running:"
msgstr ""
"Linux[can-utils](https://github.com/linux-can/can-"
"utils)工具提供了捕获软件。通常通过运行以下命令将其安装在计算机上："

#: docs/CANBUS_Troubleshooting.md:block 17 (paragraph)
msgid ""
"Once installed, one may obtain a capture of all CAN bus messages on an "
"interface with the following command:"
msgstr "安装后，可使用以下命令捕获接口上的所有CAN总线消息："

#: docs/CANBUS_Troubleshooting.md:block 19 (paragraph)
msgid ""
"One can view the resulting log file (`mycanlog` in the example above) to see "
"each raw CAN bus message that was sent and received by Klipper. Understanding "
"the content of these messages will likely require low-level knowledge of "
"Klipper's [CANBUS protocol](CANBUS_protocol.md) and Klipper's [MCU "
"commands](MCU_Commands.md)."
msgstr ""
"用户可以查看生成的日志文件(上例中的`mycanlog`)，以查看Klipper发送和接收的每个原始CAN总线消息。要理解这些消息的内容，可能需要对Klipper的[CanBus协议](CanBus_Protocol.md)和Klipper的[MCU命令](mcu_Commands.md)有较低层次的了解。"

#: docs/CANBUS_Troubleshooting.md:block 20 (header)
msgid "Parsing Klipper messages in a candump log"
msgstr "分析candump日志中的Klipper消息"

#: docs/CANBUS_Troubleshooting.md:block 21 (paragraph)
msgid ""
"One may use the `parsecandump.py` tool to parse the low-level Klipper micro-"
"controller messages contained in a candump log. Using this tool is an advanced"
" topic that requires knowledge of Klipper [MCU commands](MCU_Commands.md). For"
" example:"
msgstr ""
"用户可以使用`parsecandump.py`工具来解析烛光日志中包含的低级Klipper微控制器消息。使用此工具是一个高级主题，需要具备Klipper[MCU命令](MCU_Commands.md)的知识。例如："

#: docs/CANBUS_Troubleshooting.md:block 23 (paragraph)
msgid ""
"This tool produces output similar to the [parsedump "
"tool](Debugging.md#translating-gcode-files-to-micro-controller-commands). See "
"the documentation for that tool for information on generating the Klipper "
"micro-controller data dictionary."
msgstr ""
"此工具生成的输出类似于[ParseDump tool](Debugging.md#translating-gcode-files-to-micro-"
"controller-commands).。有关生成Klipper微控制器数据字典的信息，请参阅该工具的文档。"

#: docs/CANBUS_Troubleshooting.md:block 24 (paragraph)
msgid ""
"In the above example, `108` is the [CAN bus id](CANBUS_protocol.md#micro-"
"controller-id-assignment). It is a hexadecimal number. The id `108` is "
"assigned by Klipper to the first micro-controller. If the CAN bus has multiple"
" micro-controllers on it, then the second micro-controller would be `10a`, the"
" third would be `10c`, and so on."
msgstr ""
"在上面的例子中，`108‘是[CAN Bus id](CANBUS_protocol.md#micro-controller-id-"
"assignment).。它是一个十六进制数。ID‘108’由Klipper分配给第一个微控制器。如果CAN总线上有多个微控制器，则第二个微控制器将是 "
"`10a`，第三个微控制器将是 `10c`，依此类推。"

#: docs/CANBUS_Troubleshooting.md:block 25 (paragraph)
msgid ""
"The candump log must be produced using the `-tz -Ddex` command-line arguments "
"(for example: `candump -tz -Ddex can0,#FFFFFFFF`) in order to use the "
"`parsecandump.py` tool."
msgstr ""
"要使用`parsecandump.py`工具，必须使用`-tz-Ddex`命令行参数(例如：`andump-tz-DDEX "
"can0，#FFFFFFF`)生成坎通普日志。"

#: docs/CANBUS_Troubleshooting.md:block 26 (header)
msgid "Using a logic analyzer on the canbus wiring"
msgstr "在CanBus接线上使用逻辑分析仪"

#: docs/CANBUS_Troubleshooting.md:block 27 (paragraph)
msgid ""
"The [Sigrok Pulseview](https://sigrok.org/wiki/PulseView) software along with "
"a low-cost [logic analyzer](https://en.wikipedia.org/wiki/Logic_analyzer) can "
"be useful for diagnosing CAN bus signaling. This is an advanced topic likely "
"only of interest to experts."
msgstr ""
"[Sigrok "
"Pulseview](https://sigrok.org/wiki/PulseView)软件和低成本的[逻辑分析](https://en.wikipedia.org/wiki/Logic_analyzer)]可用于诊断CAN总线信号。这是一个可能只有专家才感兴趣的高级话题。"

#: docs/CANBUS_Troubleshooting.md:block 28 (paragraph)
msgid ""
"One can often find \"USB logic analyzers\" for under $15 (US pricing as of "
"2023). These devices are often listed as \"Saleae logic clones\" or as \"24MHz"
" 8 channel USB logic analyzers\"."
msgstr ""
"人们经常可以找到价格低于15美元的“USB逻辑分析仪”(截至2023年美国定价)。这些设备通常被列为“Saleae逻辑克隆”或“24 MHz "
"8通道USB逻辑分析仪”。"

#: docs/CANBUS_Troubleshooting.md:block 29 (paragraph)
msgid "![pulseview-canbus](img/pulseview-canbus.png)"
msgstr "![pulseview-canbus](img/pulseview-canbus.png)"

#: docs/CANBUS_Troubleshooting.md:block 30 (paragraph)
msgid ""
"The above picture was taken while using Pulseview with a \"Saleae clone\" "
"logic analyzer. The Sigrok and Pulseview software was installed on a desktop "
"machine (also install the \"fx2lafw\" firmware if that is packaged "
"separately). The CH0 pin on the logic analyzer was routed to the CAN Rx line, "
"the CH1 pin was wired to the CAN Tx pin, and GND was wired to GND. Pulseview "
"was configured to only display the D0 and D1 lines (red \"probe\" icon center "
"top toolbar). The number of samples was set to 5 million (top toolbar) and the"
" sample rate was set to 24Mhz (top toolbar). The CAN decoder was added (yellow"
" and green \"bubble icon\" right top toolbar). The D0 channel was labeled as "
"RX and set to trigger on a falling edge (click on black D0 label at left). The"
" D1 channel was labeled as TX (click on brown D1 label at left). The CAN "
"decoder was configured for 1Mbit rate (click on green CAN label at left). The "
"CAN decoder was moved to the top of the display (click and drag green CAN "
"label). Finally, the capture was started (click \"Run\" at top left) and a "
"packet was transmitted on the CAN bus (`cansend can0 123#121212121212`)."
msgstr ""
"上图是在使用Pulseview和“Saleae "
"Clone”逻辑分析仪时拍摄的。Sigrok和Pulseview软件安装在台式计算机上(如果单独打包，还应安装“fx2lafw”固件)。逻辑分析仪上的CH0引脚被布线到CAN"
" Rx线路，CH1引脚被布线到CAN "
"Tx引脚，GND被布线到GND。Pulseview配置为仅显示D0和D1线(红色“探头”图标中央顶部工具栏)。采样数设置为500万(顶部工具栏)，采样率设置为24"
" "
"Mhz(顶部工具栏)。添加了CAN解码器(右上工具栏黄绿相间的“气泡图标”)。D0通道被标记为RX并设置为在下降沿触发(点击左侧的黑色D0标签)。将d1通道标记为Tx(点击左侧棕色的d1标签)。CAN解码器配置为1Mbit速率(点击左侧绿色的CAN标签)。CAN解码器被移到显示屏顶部(单击并拖动绿色的CAN标签)。最后，开始捕获(点击左上角的“Run”(运行))，并在CAN总线上传输一个包(`cansend"
" can0 123#121212121212`)。"

#: docs/CANBUS_Troubleshooting.md:block 31 (paragraph)
msgid ""
"The logic analyzer provides an independent tool for capturing packets and "
"verifying bit timing."
msgstr "逻辑分析器提供了用于捕获数据包和验证位时序的独立工具。"

#: docs/CANBUS_Troubleshooting.md:block 13 (header)
msgid "Use an appropriate txqueuelen setting"
msgstr "使用适当的 txqueuelen 设置"

#: docs/CANBUS_Troubleshooting.md:block 14 (paragraph)
msgid ""
"The Klipper code uses the Linux kernel to manage CAN bus traffic. By default, "
"the kernel will only queue 10 CAN transmit packets. It is recommended to "
"[configure the can0 device](CANBUS.md#host-hardware) with a `txqueuelen 128` "
"to increase that size."
msgstr ""
"Klipper 代码使用 Linux 内核来管理 CAN 总线流量。默认情况下，内核只会排队 10 个 CAN 传输数据包。建议使用 `txqueuelen"
" 128` [配置 can0 设备](CANBUS.md#host-hardware) 来增加该大小。"

#: docs/CANBUS_Troubleshooting.md:block 15 (paragraph)
msgid ""
"If Klipper transmits a packet and Linux has filled all of its transmit queue "
"space then Linux will drop that packet and messages like the following will "
"appear in the Klipper log:"
msgstr ""
"如果 Klipper 传输了一个数据包，而 Linux 已经填满了其所有的传输队列空间，那么 Linux 将丢弃该数据包，并且 Klipper "
"日志中将出现如下消息："

#: docs/CANBUS_Troubleshooting.md:block 17 (paragraph)
msgid ""
"Klipper will automatically retransmit the lost messages as part of its normal "
"application level message retransmit system. Thus, this log message is a "
"warning and it does not indicate an unrecoverable error."
msgstr "作为其正常应用程序级消息重传系统的一部分，Klipper 将自动重传丢失的消息。因此，此日志消息是警告，并不表示不可恢复的错误。"

#: docs/CANBUS_Troubleshooting.md:block 18 (paragraph)
msgid ""
"If a complete CAN bus failure occurs (such as a CAN wire break) then Linux "
"will not be able to transmit any messages on the CAN bus and it is common to "
"find the above message in the Klipper log. In this case, the log message is a "
"symptom of a larger problem (the inability to transmit any messages) and is "
"not directly related to Linux `txqueuelen`."
msgstr ""
"如果发生 CAN 总线完全故障（例如 CAN 线路断线），则 Linux 将无法在 CAN 总线上传输任何消息，并且通常会在 Klipper "
"日志中找到上述消息。在这种情况下，日志消息是更大问题的征兆（无法传输任何消息），与 Linux `txqueuelen` 没有直接关系。"

#: docs/CANBUS_Troubleshooting.md:block 19 (paragraph)
msgid ""
"One may check the current queue size by running the Linux command `ip link "
"show can0`. It should report a bunch of text including the snippet `qlen 128`."
" If one sees something like `qlen 10` then it indicates the CAN device has not"
" been properly configured."
msgstr ""
"可以通过运行 Linux 命令“ip link show can0”来检查当前队列大小。它应该会报告一堆文本，包括代码片段“qlen "
"128”。如果看到类似“qlen 10”的内容，则表明 CAN 设备尚未正确配置。"

#: docs/CANBUS_Troubleshooting.md:block 20 (paragraph)
msgid ""
"It is not recommended to use a `txqueuelen` significantly larger than 128. A "
"CAN bus running at a frequency of 1000000 will typically take around 120us to "
"transmit a CAN packet. Thus a queue of 128 packets is likely to take around "
"15-20ms to drain. A substantially larger queue could cause excessive spikes in"
" message round-trip-time which could lead to unrecoverable errors. Said "
"another way, Klipper's application retransmit system is more robust if it does"
" not have to wait for Linux to drain an excessively large queue of possibly "
"stale data. This is analogous to the problem of "
"[bufferbloat](https://en.wikipedia.org/wiki/Bufferbloat) on internet routers."
msgstr ""
"不建议使用明显大于 128 的 `txqueuelen`。以 1000000 频率运行的 CAN 总线通常需要大约 120us 来传输 CAN "
"数据包。因此，128 个数据包的队列可能需要大约 15-20ms "
"才能耗尽。大得多的队列可能会导致消息往返时间出现过度峰值，从而导致无法恢复的错误。换句话说，如果 Klipper 的应用程序重传系统不必等待 Linux "
"耗尽可能过时的过大队列，它会更加强大。这类似于互联网路由器上的 "
"[bufferbloat](https://en.wikipedia.org/wiki/Bufferbloat) 问题。"

#: docs/CANBUS_Troubleshooting.md:block 21 (paragraph)
msgid ""
"Under normal circumstances Klipper may utilize ~25 queue slots per MCU - "
"typically only utilizing more slots during retransmits. (Specifically, the "
"Klipper host may transmit up to 192 bytes to each Klipper MCU before receiving"
" an acknowledgment from that MCU.) If a single CAN bus has 5 or more Klipper "
"MCUs on it, then it might be necessary to increase the `txqueuelen` above the "
"recommended value of 128. However, as above, care should be taken when "
"selecting a new value to avoid excessive round-trip-time latency."
msgstr ""
"在正常情况下，Klipper 可能每个 MCU 使用约 25 个队列槽 - 通常仅在重传期间使用更多槽。（具体而言，Klipper 主机可能向每个 "
"Klipper MCU 传输最多 192 个字节，然后才会收到该 MCU 的确认。）如果单个 CAN 总线上有 5 个或更多 Klipper "
"MCU，则可能需要将`txqueuelen`增加到建议值 128 以上。但是，如上所述，选择新值时应小心谨慎，以避免过长的往返时间延迟。"

#~ msgid "sudo apt-get update && sudo apt-get install can-utils\n"
#~ msgstr "sudo apt-get update && sudo apt-get install can-utils\n"

#~ msgid "candump -tz -Ddex can0,#FFFFFFFF > mycanlog\n"
#~ msgstr "candump -tz -Ddex can0,#FFFFFFFF > mycanlog\n"

#~ msgid "./scripts/parsecandump.py mycanlog 108 ./out/klipper.dict\n"
#~ msgstr "./scripts/parsecandump.py mycanlog 108 ./out/klipper.dict\n"

#~ msgid "Got error -1 in can write: (105)No buffer space available\n"
#~ msgstr "Got error -1 in can write: (105)No buffer space available\n"
